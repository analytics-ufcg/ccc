abline(v = which.max(table(dados_dsc$R_F)), col=4, lty=1, lwd=2)
ex12 = expression(media, mediana, moda)
utils::str(legend("topright", ex12, col = 2:4, lty=1, lwd=2))
hist(dados_outros$R_F, main = "Reprovação - Outros departamentos", xlab ="Taxa de reprovação", ylab = "Densidade" ,col='light blue',probability=TRUE, xlim=c(0,100),  ylim=c(0, 0.10))
abline(v = mean(na.omit(dados_outros$R_F)), col=2, lty=1, lwd=2)
abline(v = median(na.omit(dados_outros$R_F)), col=3, lty=1, lwd=2)
abline(v = which.max(table(na.omit(dados_outros$R_F))), col=4, lty=1, lwd=2)
ex12 = expression(media, mediana, moda)
utils::str(legend("topright", ex12, col = 2:4, lty=1, lwd=2))
par(mfrow=c(1, 1))
# Boxplot por periodo
plot1 <- ggplot(dados_dsc, aes(factor(periodo), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "Período", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot2 <- ggplot(dados_outros, aes(factor(periodo), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "Período", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot1, plot2, ncol=2)
# Boxplot geral
plot5 <- ggplot(dados_dsc, aes(factor(""), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "DSC", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot6 <- ggplot(dados_outros, aes(factor(""), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - Outros departementos\n", x = "Outros departementos", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot5, plot6, ncol=2)
plot1 <- ggplot(dados_dsc, aes(factor(periodo), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "Período", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot2 <- ggplot(dados_outros, aes(factor(periodo), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "Período", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot1, plot2, ncol=2)
plot5 <- ggplot(dados_dsc, aes(factor(""), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "DSC", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot6 <- ggplot(dados_outros, aes(factor(""), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - Outros departementos\n", x = "Outros departementos", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot5, plot6, ncol=2)
# Boxplot geral
plot5 <- ggplot(dados_dsc, aes(factor(""), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "DSC", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot6 <- ggplot(dados_outros, aes(factor(""), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - Outros departamentos\n", x = "Outros departamentos", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot5, plot6, ncol=2)
plot1 <- ggplot(dados_dsc, aes(factor(periodo), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "Período", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot2 <- ggplot(dados_outros, aes(factor(periodo), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "Período", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot1, plot2, ncol=2)
# Boxplot geral
plot5 <- ggplot(dados_dsc, aes(factor(""), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "DSC", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot6 <- ggplot(dados_outros, aes(factor(""), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - Outros departamentos\n", x = "Outros departamentos", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot5, plot6, ncol=2)
# Boxplot por periodo
plot1 <- ggplot(dados_dsc, aes(factor(periodo), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "Período", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot2 <- ggplot(dados_outros, aes(factor(periodo), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - Outros departamentos\n", x = "Período", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot1, plot2, ncol=2)
# Boxplot geral
plot5 <- ggplot(dados_dsc, aes(factor(""), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "DSC", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot6 <- ggplot(dados_outros, aes(factor(""), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - Outros departamentos\n", x = "Outros departamentos", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot5, plot6, ncol=2)
plot1 <- ggplot(dados_dsc, aes(factor(periodo), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "Período", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot2 <- ggplot(dados_outros, aes(factor(periodo), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - Outros departamentos\n", x = "Período", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot1, plot2, ncol=2)
plot5 <- ggplot(dados_dsc, aes(factor(""), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - DSC\n", x = "DSC", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot6 <- ggplot(dados_outros, aes(factor(""), R_F)) + geom_boxplot(fill = "light blue", colour = "dark blue") +  ylim(0, 100) + coord_flip() + labs(list(title = "Dados - Outros departamentos\n", x = "Outros departamentos", y = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot5, plot6, ncol=2)
# Densidade por periodo
plot3 <- ggplot(dados_dsc, aes(x = R_F)) +stat_density() + facet_grid( .~periodo) +xlim(0, 100)+ylim(0, 0.05)+ labs(list(title = "Dados - DSC\n", y = "Desidade", x = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot4 <- ggplot(dados_outros, aes(x = R_F)) +stat_density() + facet_grid( .~periodo) +xlim(0, 100)+ylim(0, 0.05)+ labs(list(title = "Dados - Outros departamentos\n", y = "Densidade", x = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot3, plot4, ncol=2)
# Densidade geral
plot7 <- ggplot(dados_dsc, aes(x = R_F)) +stat_density() + xlim(0, 100)+ylim(0, 0.05)+ labs(list(title = "Dados - DSC\n", y = "Desidade", x = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
plot8 <- ggplot(dados_outros, aes(x = R_F)) +stat_density() + xlim(0, 100)+ylim(0, 0.05)+ labs(list(title = "Dados - Outros departamentos\n", y = "Densidade", x = "Taxa de reprovação")) +  theme(panel.grid.major = element_line(size = 1), panel.grid.minor = element_line(colour = "white"))
grid.arrange(plot7, plot8, ncol=2)
# Histograma sem legenda
plot9 <- ggplot(dados_dsc, aes(x=R_F)) + geom_histogram(aes(y = ..density..))+ geom_vline(xintercept = mean(dados_dsc$R_F),colour="green", size =1) + geom_vline(xintercept = median(dados_dsc$R_F),colour="blue", size =1)+ scale_y_continuous(limits=c(0, 0.20))+ scale_x_continuous(limits=c(0, 100))+ labs(list(title = "Reprovação - DSC", x = "Taxa de reprovação", y = "Frequência"))
plot10 <- ggplot(dados_outros, aes(x=R_F)) + geom_histogram(aes(y = ..density..))+ geom_vline(xintercept = mean(na.omit(dados_outros$R_F)),colour="green", size =1) + geom_vline(xintercept = median(na.omit(dados_outros$R_F)),colour="blue", size =1)+ scale_y_continuous(limits=c(0, 0.20))+ scale_x_continuous(limits=c(0, 100))+ labs(list(title = "Reprovação - Outros departamentos", x = "Taxa de reprovação", y = "Frequência"))
grid.arrange(plot9, plot10, ncol=2)
getwd
getwd()
setwd("~/GitHub/ccc/src/R")
library(ggplot2)
library(gridExtra)
d = read.csv("../../data/notas.txt",sep = "\t", encoding = "UTF-8")
for(i in 1:nrow(d)){
d$periodo[i] <- paste(d$ano[i],d$periodo[i],sep = ".")
}
outros <- c("Administração", "Álgebra Linear", "Álgebra Vetorial e Geometria Analítica",
"BASQUETE   MASC/FEM",  "BASQUETEBOL - FEM", "BASQUETEBOL - MASC",
"Cálculo Diferencial e Integral I", "Cálculo Diferencial e Integral II",
"Cálculo Diferencial e Integral III", "Direito e Cidadania", "Economia",
"EQUACOES DIFERENCIAIS", "EXPRESSAO GRAFICA", "Fundamentos de Física Clássica",
"Fundamentos de Física Moderna", "Futsal", "Informática e Sociedade", "Inglês",
"Introdução à Arquitetura", "Leitura e Produção de Textos", "Métodos Estatísticos",
"Probabilidade e Estatística", "Química Geral", "Relações Humanas", "Sociologia Industrial I" )
dsc <- c("Análise e Técnicas de Algoritmos", "Avaliação de Desempenho de Sistemas Discretos",
"Banco de Dados I", "Banco de Dados II",
"Compiladores", "Empreendedorismo",
"Engenharia de Software I", "Estágio Integrado",
"Estruturas de Dados e Algoritmos", "Gerência da Informação",
"GERENCIA DE Redes de Computadores", "Inteligência Artificial I", "Interconexão de Redes de Computadores",
"Introdução à Computação", "Lab. de Engenharia de Software",
"Lab. de Estruturas de Dados e Algoritmos", "Lab. de Interconexão de Redes de Computadores",
"Lab. de Organização e Arquitetura de Computadores", "Lab. de Programação I",
"Lab. de Programação II", "Lógica Matemática",
"Matemática Discreta", "Metodologia Científica", "Métodos e Software Numéricos",
"Organização e Arquitetura de Computadores",
"Paradigmas de Linguagem de Programação",
"Programação I", "Programação II", "Projeto de Redes de Computadores",
"Projeto em Computação I", "Projeto em Computação II",
"Redes de Computadores", "Redes Neurais",
"Seminários (Educação Ambiental)", "Sistemas de Informação I",
"Sistemas de Informação II", "Sistemas de Informações Geográficas",
"Sistemas Operacionais", "TEC (Princípios de Administração Financeira)",
"TECC (Administração de Sistemas)", "TECC (Algoritmos Avançados I)",
"TECC (Algoritmos Avançados II)", "TECC (Algoritmos Avançados III)",
"TECC (Economia de Tecnologia da Informação)", "TECC (Estágio Integrado II)",
"TECC (Fundamentos e Aplicações de Realidade Virtual)", "TECC (Métodos Formais)",
"TECC (Modelagem de Ambientes Virtuais)", "TECC (Redes Ad Hoc Sem Fio)",
"TECC (Segurança em Redes de Computadores)", "TECC (Sistemas de Recuperação da Informação)",
"TECC (Visão Computacional)", "TECC(DIDATICA EM CIENCIA DA COMPUTACAO II)",
"TECC(DIDATICA EM CIENCIA DA COMPUTACAO)", "TECC(Empreendedorismo em Software)   ",
"TECC(Fundamentos de Prog. Concorrente)", "TECC(METODOS E P T G M DADOS HISTORICOS)",
"Teoria da Computação", "Teoria dos Grafos")
# Retirando os dados dos alunos reprovados por falta ou trancamento
dados_validos = subset(d, d$situacao %in% c("A","R"))
# Separando os dados do DSC e de outros departamentos
dados_dsc = subset(dados_validos, dados_validos$disciplina %in% dsc)
dados_outros = subset(dados_validos, dados_validos$disciplina %in% outros)
View(dados_outros)
dados_validos <- dados_validos[!duplicated(dados_validos[,c("matricula","disciplina")]),]
# Separando os dados do DSC e de outros departamentos
dados_dsc = subset(dados_validos, dados_validos$disciplina %in% dsc)
dados_outros = subset(dados_validos, dados_validos$disciplina %in% outros)
dados_validos = subset(d, d$situacao %in% c("A","R"))
# Retirando as múltiplas entradas por aluno
dados_dsc = subset(dados_validos, dados_validos$disciplina %in% dsc)
dados_outros = subset(dados_validos, dados_validos$disciplina %in% outros)
dados_validos <- dados_validos[!duplicated(dados_validos[,c("matricula","disciplina")]),]
# Separando os dados do DSC e de outros departamentos
dados_dsc = subset(dados_validos, dados_validos$disciplina %in% dsc)
dados_outros = subset(dados_validos, dados_validos$disciplina %in% outros)
View(dados_dsc)
teste = aggregate(dados_dsc$disciplina,list(dados_dsc$matricula),FUN=sum)
teste = aggregate(dados_dsc$disciplina,list(dados_dsc$matricula))
example(aggregate)
teste = aggregate(dados_dsc$contador,list(dados_dsc$disciplina, dados_validos$matricula),FUN=identyt)
teste = aggregate(dados_dsc$contador,list(dados_dsc$disciplina, dados_validos$matricula),FUN=count)
teste = aggregate(dados_dsc$contador,list(dados_dsc$disciplina, dados_validos$matricula),FUN=length)
teste = aggregate(1,list(dados_dsc$disciplina, dados_validos$matricula),FUN=length)
teste = aggregate(1,list(dados_dsc$disciplina, dados_validos$matricula),FUN=mean)
dados_validos$contador = 1
# Separando os dados do DSC e de outros departamentos
dados_dsc = subset(dados_validos, dados_validos$disciplina %in% dsc)
dados_outros = subset(dados_validos, dados_validos$disciplina %in% outros)
dados_validos = subset(d, d$situacao %in% c("A","R"))
# Retirando as múltiplas entradas por aluno
dados_validos <- dados_validos[!duplicated(dados_validos[,c("matricula","disciplina")]),]
dados_validos$contador = 1
# Separando os dados do DSC e de outros departamentos
dados_dsc = subset(dados_validos, dados_validos$disciplina %in% dsc)
dados_outros = subset(dados_validos, dados_validos$disciplina %in% outros)
# Testando
teste = aggregate(dados_dsc$contador,list(dados_dsc$disciplina, dados_validos$matricula),FUN=identyt)
View(testDF)
teste = aggregate(dados_dsc$contador,list(dados_dsc$disciplina, dados_validos$matricula),FUN=mean)
View(dados_dsc)
View(testDF)
dados_validos = subset(d, d$situacao %in% c("A","R"))
# Retirando as múltiplas entradas por aluno
dados_validos <- dados_validos[!duplicated(dados_validos[,c("matricula","disciplina")]),]
dados_validos$contador = 1
# Separando os dados do DSC e de outros departamentos
dados_dsc = subset(dados_validos, dados_validos$disciplina %in% dsc)
dados_outros = subset(dados_validos, dados_validos$disciplina %in% outros)
# Testando
teste = aggregate(dados_dsc$contador,list(dados_dsc$disciplina, dados_validos$matricula),FUN=mean)
aggregate(dados_dsc$contador,list(dados_dsc$disciplina, dados_validos$matricula),FUN=mean)
teste = aggregate(dados_dsc$contador,list(dados_dsc$disciplina, dados_dsc$matricula),FUN=mean)
View(teste)
teste = aggregate(dados_dsc$contador,list(dados_dsc$disciplina, dados_dsc$matricula, dados_dsc$matricula),FUN=mean)
View(teste)
teste = aggregate(dados_dsc$contador,list(dados_dsc$disciplina, dados_dsc$matricula, dados_dsc$media),FUN=mean)
View(teste)
View(teste)
teste = aggregate(dados_dsc$disciplina,list(dados_dsc$matricula, dados_dsc$media),FUN=mean)
View(teste)
t <- ddply(dados_dsc, c("disciplina", "matricula"), summarise,
N    = length(media))
library(plyr)
t <- ddply(dados_dsc, c("disciplina", "matricula"), summarise,
N    = length(media))
View(t)
t <- ddply(dados_dsc, c("disciplina", "matricula"), summarise,
N    = (media))
View(t)
t <- ddply(dados_dsc, c("disciplina", "matricula"), summarise,
media    = (media))
View(t)
View(dados_dsc)
View(dados_dsc)
compiladores <- subset(dados_dsc,dados_dsc$disciplina %in% c("Compiladores"))
View(compiladores)
compiladores <- subset(t,t$disciplina %in% c("Compiladores"))
View(compiladores)
typeof(compiladores)
c <-  compiladores[order(compiladores$media)]
c <-  compiladores[order(compiladores$media),]
View(c)
View(compiladores)
c[match("109110076",c$matricula),]
match("109110076",c$matricula)
match("107210010",c$matricula)
ordenado<-  compiladores[order(-compiladores$media),]
View(compiladores)
ordenado<-  compiladores[-order(compiladores$media),]
ordenado<-  compiladores[order(compiladores$media),]
View(ordenado)
nrow(ordenado)
x = (posicao * 100)/nrow(ordenado)
posicao <- match("107210010",ordenado$matricula)
# Calculando porcentagem
x = (posicao * 100)/nrow(ordenado)
x
x = (113 * 100)/nrow(ordenado)
x
x = (114 * 100)/nrow(ordenado)
x
x = 100-((posicao * 100)/nrow(ordenado))
x
posicao
posicao = 100
x
x = 100-((posicao * 100)/nrow(ordenado))
x
roundUpNice <- function(x, nice=c(1,2,4,5,6,8,10)) {
if(length(x) != 1) stop("'x' must be of length 1")
10^floor(log10(x)) * nice[[which(x <= 10^floor(log10(x)) * nice)[[1]]]]
}
roundUpNice <- function(x, nice=c(0,10,20,30,40,50,60,70,80,90,100)) {
roundUpNice <- function(x, nice=c(0,10,20,30,40,50,60,70,80,90,100)) {
if(length(x) != 1) stop("'x' must be of length 1")
10^floor(log10(x)) * nice[[which(x <= 10^floor(log10(x)) * nice)[[1]]]]
}
roundUpNice(32.2)
roundUpNice(2.2)
roundUpNice <- function(x, nice=c(0,10,20,30,40,50,60,70,80,90,100)) {
floor(log10(x)) * nice[[which(x <= 10^floor(log10(x)) * nice)[[1]]]]
}
roundUpNice(2.2)
roundUpNice(32.2)
round_any(132.1, 10)
round_any(32.1, 10)
round_any(34.1, 10)
round_any(35.1, 10)
x <- 100-((posicao * 100)/nrow(ordenado))
resuntaldo <- round_any(x, 10)
resultado <- round_any(x, 10)
resultado
getCompetencia <- function(disci, aluno) {
# Escolhe a disciplina e ordena pela média
disciplina_escolhida <- subset(t,t$disciplina %in% c(disci))
ordenado <- disciplina_escolhida[order(disciplina_escolhida$media),]
# Escolhe o aluno e pega a posição dele
posicao <- match(aluno,ordenado$matricula)
# Calculando porcentagem
x <- 100-((posicao * 100)/nrow(ordenado))
return round_any(x, 10)
}
getCompetencia <- function(disci, aluno) {
# Escolhe a disciplina e ordena pela média
disciplina_escolhida <- subset(t,t$disciplina %in% c(disci))
ordenado <- disciplina_escolhida[order(disciplina_escolhida$media),]
# Escolhe o aluno e pega a posição dele
posicao <- match(aluno,ordenado$matricula)
# Calculando porcentagem
x <- 100-((posicao * 100)/nrow(ordenado))
resultado <- round_any(x, 10)
}
getCompetencia <- function(disci, aluno) {
# Escolhe a disciplina e ordena pela média
disciplina_escolhida <- subset(t,t$disciplina %in% c(disci))
ordenado <- disciplina_escolhida[order(disciplina_escolhida$media),]
# Escolhe o aluno e pega a posição dele
posicao <- match(aluno,ordenado$matricula)
# Calculando porcentagem
x <- 100-((posicao * 100)/nrow(ordenado))
resultado <- round_any(x, 10)
return resultado
}
getCompetencia <- function(disci, aluno) {
# Escolhe a disciplina e ordena pela média
disciplina_escolhida <- subset(t,t$disciplina %in% c(disci))
ordenado <- disciplina_escolhida[order(disciplina_escolhida$media),]
# Escolhe o aluno e pega a posição dele
posicao <- match(aluno,ordenado$matricula)
# Calculando porcentagem
x <- 100-((posicao * 100)/nrow(ordenado))
resultado <- round_any(x, 10)
return (resultado)
}
getCompetencia("Compiladores", "105210141")
getCompetencia("Compiladores", "109110100")
getCompetencia("Compiladores", "110110047")
getCompetencia("Compiladores", "109210034")
getCompetencia("Compiladores", "108110024")
library(ggplot2)
library(plyr)
d = read.csv("../../data/notas.txt",sep = "\t", encoding = "UTF-8")
for(i in 1:nrow(d)){
d$periodo[i] <- paste(d$ano[i],d$periodo[i],sep = ".")
}
outros <- c("Administração", "Álgebra Linear", "Álgebra Vetorial e Geometria Analítica",
"BASQUETE   MASC/FEM",  "BASQUETEBOL - FEM", "BASQUETEBOL - MASC",
"Cálculo Diferencial e Integral I", "Cálculo Diferencial e Integral II",
"Cálculo Diferencial e Integral III", "Direito e Cidadania", "Economia",
"EQUACOES DIFERENCIAIS", "EXPRESSAO GRAFICA", "Fundamentos de Física Clássica",
"Fundamentos de Física Moderna", "Futsal", "Informática e Sociedade", "Inglês",
"Introdução à Arquitetura", "Leitura e Produção de Textos", "Métodos Estatísticos",
"Probabilidade e Estatística", "Química Geral", "Relações Humanas", "Sociologia Industrial I" )
dsc <- c("Análise e Técnicas de Algoritmos", "Avaliação de Desempenho de Sistemas Discretos",
"Banco de Dados I", "Banco de Dados II",
"Compiladores", "Empreendedorismo",
"Engenharia de Software I", "Estágio Integrado",
"Estruturas de Dados e Algoritmos", "Gerência da Informação",
"GERENCIA DE Redes de Computadores", "Inteligência Artificial I", "Interconexão de Redes de Computadores",
"Introdução à Computação", "Lab. de Engenharia de Software",
"Lab. de Estruturas de Dados e Algoritmos", "Lab. de Interconexão de Redes de Computadores",
"Lab. de Organização e Arquitetura de Computadores", "Lab. de Programação I",
"Lab. de Programação II", "Lógica Matemática",
"Matemática Discreta", "Metodologia Científica", "Métodos e Software Numéricos",
"Organização e Arquitetura de Computadores",
"Paradigmas de Linguagem de Programação",
"Programação I", "Programação II", "Projeto de Redes de Computadores",
"Projeto em Computação I", "Projeto em Computação II",
"Redes de Computadores", "Redes Neurais",
"Seminários (Educação Ambiental)", "Sistemas de Informação I",
"Sistemas de Informação II", "Sistemas de Informações Geográficas",
"Sistemas Operacionais", "TEC (Princípios de Administração Financeira)",
"TECC (Administração de Sistemas)", "TECC (Algoritmos Avançados I)",
"TECC (Algoritmos Avançados II)", "TECC (Algoritmos Avançados III)",
"TECC (Economia de Tecnologia da Informação)", "TECC (Estágio Integrado II)",
"TECC (Fundamentos e Aplicações de Realidade Virtual)", "TECC (Métodos Formais)",
"TECC (Modelagem de Ambientes Virtuais)", "TECC (Redes Ad Hoc Sem Fio)",
"TECC (Segurança em Redes de Computadores)", "TECC (Sistemas de Recuperação da Informação)",
"TECC (Visão Computacional)", "TECC(DIDATICA EM CIENCIA DA COMPUTACAO II)",
"TECC(DIDATICA EM CIENCIA DA COMPUTACAO)", "TECC(Empreendedorismo em Software)   ",
"TECC(Fundamentos de Prog. Concorrente)", "TECC(METODOS E P T G M DADOS HISTORICOS)",
"Teoria da Computação", "Teoria dos Grafos")
# Retirando os dados dos alunos reprovados por falta ou trancamento
dados_validos = subset(d, d$situacao %in% c("A","R"))
# Retirando as múltiplas entradas por aluno
dados_validos <- dados_validos[!duplicated(dados_validos[,c("matricula","disciplina")]),]
dados_validos$contador = 1
# Separando os dados do DSC e de outros departamentos
dados_dsc = subset(dados_validos, dados_validos$disciplina %in% dsc)
dados_outros = subset(dados_validos, dados_validos$disciplina %in% outros)
# Agregando os dados
t <- ddply(dados_dsc, c("disciplina", "matricula"), summarise, media = (media))
getCompetencia <- function(disci, aluno) {
# Escolhe a disciplina e ordena pela média
disciplina_escolhida <- subset(t,t$disciplina %in% c(disci))
ordenado <- disciplina_escolhida[order(disciplina_escolhida$media),]
# Escolhe o aluno e pega a posição dele
posicao <- match(aluno,ordenado$matricula)
# Calculando porcentagem
x <- 100-((posicao * 100)/nrow(ordenado))
resultado <- round_any(x, 10)
return (resultado)
}
getCompetencia("Compiladores", "108110024")
getCompetencia("Compiladores", "109210034")
View(t)
getCompetencia("Análise e Técnicas de Algoritmos", "109210034")
getCompetenciaDisciplina <- function(disci, aluno) {
# Escolhe a disciplina e ordena pela média
disciplina_escolhida <- subset(t,t$disciplina %in% c(disci))
ordenado <- disciplina_escolhida[order(disciplina_escolhida$media),]
# Escolhe o aluno e pega a posição dele
posicao <- match(aluno,ordenado$matricula)
# Calculando porcentagem
x <- 100-((posicao * 100)/nrow(ordenado))
resultado <- round_any(x, 10)
return (resultado)
}
t <- ddply(dados_validos, c("disciplina", "matricula"), summarise, media = (media))
# Escolhe a disciplina e ordena pela média
disciplina_escolhida <- subset(t,t$disciplina %in% c(disci))
disci = "Compiladores"
disciplina_escolhida <- subset(t,t$disciplina %in% c(disci))
View(disciplina_escolhida)
ordenado <- disciplina_escolhida[order(disciplina_escolhida$media),]
# Escolhe o aluno e pega a posição dele
aluno = "111110923"
posicao <- match(aluno,ordenado$matricula)
# Calculando porcentagem
x <- 100-((posicao * 100)/nrow(ordenado))
resultado <- round_any(x, 10)
return (resultado)
resultado
disci = "Banco de Dados I"
# Escolhe a disciplina e ordena pela média
disciplina_escolhida <- subset(t,t$disciplina %in% c(disci))
ordenado <- disciplina_escolhida[order(disciplina_escolhida$media),]
# Escolhe o aluno e pega a posição dele
posicao <- match(aluno,ordenado$matricula)
# Calculando porcentagem
x <- 100-((posicao * 100)/nrow(ordenado))
resultado <- round_any(x, 10)
resultado
x
disci = "Banco de Dados II"
disciplina_escolhida <- subset(t,t$disciplina %in% c(disci))
ordenado <- disciplina_escolhida[order(disciplina_escolhida$media),]
# Escolhe o aluno e pega a posição dele
posicao <- match(aluno,ordenado$matricula)
# Calculando competencia
x <- 100-((posicao * 100)/nrow(ordenado))
x
resultado <- round_any(x, 10)
resultado
install.packages("shiny")
library(shiny)
runExample("01_hello")
library(shiny)
# Define UI for application that plots random distributions
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input for number of observations
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 1,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
library(shiny)
# Define server logic required to generate and plot a random distribution
shinyServer(function(input, output) {
# Expression that generates a plot of the distribution. The expression
# is wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should be automatically
#     re-executed when inputs change
#  2) Its output type is a plot
#
output$distPlot <- renderPlot({
# generate an rnorm distribution and plot it
dist <- rnorm(input$obs)
hist(dist)
})
})
~/shinyapp
|-- ui.R
|-- server.R
~/
runApp("~/shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
level(dados_dsc$disciplina)
levels(dados_dsc$disciplina)
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
subset(dados_validos,dados_validos$disciplina %in% c("Compiladores"))
subset(dados_validos$matricula,dados_validos$disciplina %in% c("Compiladores"))
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
r
R
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
fix(getCompetencia)
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
# Funcao que calcula a competencia de um determinado aluno em uma determinada disciplina
getCompetenciaDisciplina <- function(disci, aluno) {
# Escolhe a disciplina e ordena pela média
disciplina_escolhida <- subset(t,t$disciplina %in% c(disci))
ordenado <- disciplina_escolhida[order(disciplina_escolhida$media),]
# Escolhe o aluno e pega a posição dele
posicao <- match(aluno,as.numeric(ordenado$matricula))
# Calculando competencia
x <- 100-((posicao * 100)/nrow(ordenado))
resultado <- round_any(x, 10)
return (resultado)
}
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
??Slider
install.packages("manipulate")
library(manipulate)
slider(5, 25, initial = 10))
slider(5, 25, initial = 10)
manipulate(plot(1:x), x = slider(5, 10))
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("shinyapp")
runApp("Competencia")
