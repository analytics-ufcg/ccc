for (i in 1:k_) {
teste = subset(aluno_disciplina_periodo_merge,cluster == i)
cdata <- ddply(teste, c("coddisciplina","disciplina"), summarize, size    = length(PeriodoRelativo),
Mode = Mode(PeriodoRelativo),media = mean(PeriodoRelativo))
write.csv(cdata,paste("data/",i,"_cluster.csv", sep=""),row.names=FALSE)
}
#aplica agrupamento
hc = hclust(dfToFastcluster,method='ward')
#plotar gráfico da dissimilaridade
plot(plotHeightList(createHeightList(hc$height),20))
#plota dendograma
plot(hc)
require(fastcluster)
library(plyr)
library("ggplot2")
#funcao para criar lista com dissimilaridade a cada junçao de cluster
createHeightList <- function (hcHeight){
tamanho = length(hcHeight)
heightList = c()
for (i in 1:tamanho ) {
heightList[i] = hcHeight[tamanho-i + 1]
}
heightList
}
#funcao para ploar dissmilaridades a cada passo
plotHeightList <- function(heightList,limite){
my_theme <- theme_bw()
my_theme$strip.background <- theme_rect(colour = "grey", fill = colors()[492])
theme_set(my_theme)
dados<-data.frame(x=1:limite, y=heightList[1:limite], group=1)
p <- ggplot(dados, aes(x,y)) + geom_line(size=1)
p <- p + xlab('\nNúmero de grupos') + ylab('Distância média dentro dos grupos') + theme(panel.grid.minor.x=element_blank(), panel.grid.major.x=element_blank())
p <- p + scale_x_continuous(breaks=seq(1, limite, 1))
p
}
#########FUNCAO QUE CALCULA MODA
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
##################################leitura de arquivos
#Dataframe que tu gerou ontem de tarde nos 10 min que tu foi no lab
dataframe = read.csv("data/dissimilaridade_distancia.csv", header = FALSE, sep=",")
#Dataframe com períodos relativos que os alunos pagaram as disciplinas
aluno_disciplina_periodo = read.csv("data/aluno-disciplina-periodo.csv", header = T, sep=",")
#informações das disciplinas - necessário para pegarmos o nome da disciplina
disciplinas= read.csv("data/grade-disciplinas-por-periodo.csv", header = T, sep=",")
#novo DF com nome da disciplina
aluno_disciplina_periodo = merge(aluno_disciplina_periodo, disciplinas[c("disciplina","coddisciplina")], by = "coddisciplina")
#########################################################
################# CRIA MATRIZ DO JEITO CERTO PARA INPUT NO FASTCLUSTER##################
dataframe = dataframe[with(dataframe, order(V1, V2)), ]
matriculas <- with(dataframe, unique(c(as.character(V1), as.character(V2))))
dfToFastcluster <- with(dataframe, structure(V3,
Size = length(matriculas),
Labels = matriculas,
Diag = FALSE,
Upper = FALSE,
method = "user",
class = "dist"))
#######################################################################################
###########################################AGRUPAMENTO
#aplica agrupamento
hc = hclust(dfToFastcluster,method='ward')
#plotar gráfico da dissimilaridade
plot(plotHeightList(createHeightList(hc$height),20))
#plota dendograma
plot(hc)
#número de cluster que vc escolheu
k_ = 6
#determina quais amostras vao para cada cluster
clusters <- cutree(hc, k = k_)
#######################################################################################
##################CRIA DF COM MATRICULA DO ALUNO / CLUSTER QUE ELE FICOU
dataAlunos <- data.frame(matricula = matriculas)
dataAlunos$cluster = 0
for (i in 1:k_) {
dataAlunos[(clusters == i),]$cluster = i
}
#################DF COM INFORMAÇOES que o aluno pagou a disciplina em tal período, agora com o cluster do aluno(necessário para calcular a moda)
aluno_disciplina_periodo_merge = merge(aluno_disciplina_periodo, dataAlunos, by = "matricula")
teste = subset(aluno_disciplina_periodo_merge,cluster ==1)
ddply(teste, c("coddisciplina","disciplina"), summarize, size    = length(PeriodoRelativo),
Mode = Mode(PeriodoRelativo),media = mean(PeriodoRelativo))
########################SALVA K ARQUIVOS, COM A BLOCAGEM COMUM PARA CADA CLUSTER, BASEADO NA MODA.
for (i in 1:k_) {
teste = subset(aluno_disciplina_periodo_merge,cluster == i)
cdata <- ddply(teste, c("coddisciplina","disciplina"), summarize, size    = length(PeriodoRelativo),
Mode = Mode(PeriodoRelativo),media = mean(PeriodoRelativo))
write.csv(cdata,paste("data/",i,"_cluster.csv", sep=""),row.names=FALSE)
}
fix(plotHeightList)
fix(createHeightList)
notas.disciplinas = read.csv("data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
#Calculo por periodo
#resultado.absoluto = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, sum)
#resultado.relativo = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
resultado = resultado[with(resultado, order(RESULTADORELATIVO)),]
setwd("Desenvolvimento/ccc/ccc-analytics-2.0")
setwd("/home/celio/Desenvolvimento/ccc/ccc-analytics-2.0")
notas.disciplinas = read.csv("data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
#Calculo por periodo
#resultado.absoluto = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, sum)
#resultado.relativo = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
resultado = resultado[with(resultado, order(RESULTADORELATIVO)),]
View(resultado)
