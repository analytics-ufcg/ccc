if(as.integer(substring(as.character(pEntrada), 1, 2)) > 100){
nota =1
}
result = 2 * (as.integer(substring(as.character(pAtual), 1, 2)) - as.integer(substring(as.character(pEntrada), 1, 2)))
result = result + (as.integer(substring(as.character(pAtual), 4, 4)) - as.integer(substring(as.character(pEntrada), 3, 3)))
result = result + 1
if(as.integer(substring(as.character(pEntrada), 1, 2)) > 100){
nota =1
}
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('/home/celio/Downloads/Dados_historicos_de_notas-Computacao.csvfa')
notaDisciplDF[8] = notaDisciplDF$PERIODO
colnames(notaDisciplDF)[8] <- "PeriodoRelativo"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,6), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
calcularPeriodoRelativo <- function(pAtual, pEntrada){
result = 2 * (as.integer(substring(as.character(pAtual), 1, 2)) - as.integer(substring(as.character(pEntrada), 1, 2)))
result = result + (as.integer(substring(as.character(pAtual), 4, 4)) - as.integer(substring(as.character(pEntrada), 3, 3)))
result = result + 1
if(as.integer(substring(as.character(pEntrada), 1, 2)) > 50){
nota =1
}
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('/home/celio/Downloads/Dados_historicos_de_notas-Computacao.csvfa')
notaDisciplDF[8] = notaDisciplDF$PERIODO
colnames(notaDisciplDF)[8] <- "PeriodoRelativo"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,6), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
calcularPeriodoRelativo <- function(pAtual, pEntrada){
if(as.integer(substring(as.character(pEntrada), 1, 2)) > 90){
resultado = 1900 + as.integer(substring(as.character(pEntrada), 1, 2))
} else{
resultado = 2000 + as.integer(substring(as.character(pEntrada), 1, 2)))
}
result = 2 * (as.integer(substring(as.character(pAtual), 1, 4)) - resultado)
result = result + (as.integer(substring(as.character(pAtual), 6, 6)) - as.integer(substring(as.character(pEntrada), 3, 3)))
result = result + 1
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('/home/celio/Downloads/Dados_historicos_de_notas-Computacao.csvfa')
notaDisciplDF[8] = notaDisciplDF$PERIODO
colnames(notaDisciplDF)[8] <- "PeriodoRelativo"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 1,6), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
calcularPeriodoRelativo <- function(pAtual, pEntrada){
if(as.integer(substring(as.character(pEntrada), 1, 2)) > 90){
resultado = 1900 + as.integer(substring(as.character(pEntrada), 1, 2))
} else{
resultado = 2000 + as.integer(substring(as.character(pEntrada), 1, 2))
}
result = 2 * (as.integer(substring(as.character(pAtual), 1, 4)) - resultado)
result = result + (as.integer(substring(as.character(pAtual), 6, 6)) - as.integer(substring(as.character(pEntrada), 3, 3)))
result = result + 1
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('/home/celio/Downloads/Dados_historicos_de_notas-Computacao.csvfa')
notaDisciplDF[8] = notaDisciplDF$PERIODO
colnames(notaDisciplDF)[8] <- "PeriodoRelativo"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 1,6), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
calcularPeriodoRelativo <- function(pAtual, pEntrada){
if((as.integer(substring(as.character(pEntrada), 1, 2))) > 90){
resultado = 1900 + as.integer(substring(as.character(pEntrada), 1, 2))
} else{
resultado = 2000 + as.integer(substring(as.character(pEntrada), 1, 2))
}
result = 2 * (as.integer(substring(as.character(pAtual), 1, 4)) - resultado)
result = result + (as.integer(substring(as.character(pAtual), 6, 6)) - as.integer(substring(as.character(pEntrada), 3, 3)))
result = result + 1
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('/home/celio/Downloads/Dados_historicos_de_notas-Computacao.csvfa')
notaDisciplDF[8] = notaDisciplDF$PERIODO
colnames(notaDisciplDF)[8] <- "PeriodoRelativo"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 1,6), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
notaDisciplDF$MATRICULA
View(notaDisciplDF)
# Dado um periodo letivo qualquer e o periodo de entrada no curso esta função retorna um numero que representa o periodo relativo ao periodo de entrada.
# O formato do periodo deve ser 3 digitos, os dois primeiros para o ano e o terceiro para o semestre.
# Ex. Um aluno entrou no curso no periodo 2011.1 e está em 2013.2, entao as entradas devem ser 111 e 132, respectivamente. A saída seria 5 (quinto período).
calcularPeriodoRelativo <- function(pAtual, pEntrada){
if((as.integer(substring(as.character(pEntrada), 1, 2))) > 90){
resultado = 1900 + as.integer(substring(as.character(pEntrada), 1, 2))
} else{
resultado = 2000 + as.integer(substring(as.character(pEntrada), 1, 2))
}
result = 2 * (as.integer(substring(as.character(pAtual), 1, 4)) - resultado)
result = result + (as.integer(substring(as.character(pAtual), 6, 6)) - as.integer(substring(as.character(pEntrada), 3, 3)))
result = result + 1
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('/home/celio/Downloads/Dados_historicos_de_notas-Computacao.csv')
notaDisciplDF[8] = notaDisciplDF$PERIODO
colnames(notaDisciplDF)[8] <- "PeriodoRelativo"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 1,6), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
setwd("/home/celio/Desenvolvimento/ccc")
setwd("/home/celio/Desenvolvimento/ccc/ccc-analytics-2.0")
# Dado um periodo letivo qualquer e o periodo de entrada no curso esta função retorna um numero que representa o periodo relativo ao periodo de entrada.
# O formato do periodo deve ser 3 digitos, os dois primeiros para o ano e o terceiro para o semestre.
# Ex. Um aluno entrou no curso no periodo 2011.1 e está em 2013.2, entao as entradas devem ser 111 e 132, respectivamente. A saída seria 5 (quinto período).
calcularPeriodoRelativo <- function(pAtual, pEntrada){
result = 2 * (as.integer(substring(as.character(pAtual), 1, 2)) - as.integer(substring(as.character(pEntrada), 1, 2)))
result[substring(as.character(pAtual), 3, 3) == ""] <- result[substring(as.character(pAtual), 3, 3) == ""] + (1 - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) == ""]
result[substring(as.character(pAtual), 3, 3) != ""] <- result[substring(as.character(pAtual), 3, 3) != ""] + (as.integer(substring(as.character(pAtual), 3, 3)) - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) != ""]
result = result + 1
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('ccc2/data/historico-ccc.csv')
notaDisciplDF[12] = notaDisciplDF$periodo
colnames(notaDisciplDF)[12] <- "PeriodoRelativo"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$periodo), 3,5), substring(as.character(notaDisciplDF$matricula), 2,4))
# Ex. Um aluno entrou no curso no periodo 2011.1 e está em 2013.2, entao as entradas devem ser 111 e 132, respectivamente. A saída seria 5 (quinto período).
calcularPeriodoRelativo <- function(pAtual, pEntrada){
result = 2 * (as.integer(substring(as.character(pAtual), 1, 2)) - as.integer(substring(as.character(pEntrada), 1, 2)))
result[substring(as.character(pAtual), 3, 3) == ""] <- result[substring(as.character(pAtual), 3, 3) == ""] + (1 - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) == ""]
result[substring(as.character(pAtual), 3, 3) != ""] <- result[substring(as.character(pAtual), 3, 3) != ""] + (as.integer(substring(as.character(pAtual), 3, 3)) - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) != ""]
result = result + 1
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('ccc2/data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PeriodoRelativo"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$periodo), 3,5), substring(as.character(notaDisciplDF$matricula), 2,4))
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('ccc2/data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PeriodoRelativo"
View(notaDisciplDF)
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$periodo), 3,5), substring(as.character(notaDisciplDF$matricula), 2,4))
calcularPeriodoRelativo <- function(pAtual, pEntrada){
result = 2 * (as.integer(substring(as.character(pAtual), 1, 2)) - as.integer(substring(as.character(pEntrada), 1, 2)))
result[substring(as.character(pAtual), 3, 3) == ""] <- result[substring(as.character(pAtual), 3, 3) == ""] + (1 - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) == ""]
result[substring(as.character(pAtual), 3, 3) != ""] <- result[substring(as.character(pAtual), 3, 3) != ""] + (as.integer(substring(as.character(pAtual), 3, 3)) - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) != ""]
result = result + 1
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('ccc2/data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PERIODORELATIVO"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PERIODORELATIVO = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,5), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
View(notaDisciplDF)
notaDisciplDF$PERIODORELATIVO
calcularPeriodoRelativo <- function(pAtual, pEntrada){
result = 2 * (as.integer(substring(as.character(pAtual), 1, 2)) - as.integer(substring(as.character(pEntrada), 1, 2)))
result[substring(as.character(pAtual), 3, 3) == ""] <- result[substring(as.character(pAtual), 3, 3) == ""] + (1 - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) == ""]
result[substring(as.character(pAtual), 3, 3) != ""] <- result[substring(as.character(pAtual), 3, 3) != ""] + (as.integer(substring(as.character(pAtual), 3, 3)) - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) != ""]
result = result + 1
return(result)
}
periodo <- c("2012.1","2012.2","2004.1","2004.2","2013.1", "2012.1","2012.2", "2011.2", "2011." , "2011.")
matricula <- c("111","111","041","041", "052", "112","112", "112", "101", "102")
fakePeriodo <- data.frame(periodo, matricula)
fakePeriodo[3] <- NA
colnames(fakePeriodo)[3] <- "PeriodoRelativo"
fakePeriodo$PeriodoRelativo = calcularPeriodoRelativo(fakePeriodo$periodo, fakePeriodo$matricula)
View(fakePeriodo)
calcularPeriodoRelativo <- function(pAtual, pEntrada){
result = 2 * (as.integer(substring(as.character(pAtual), 1, 2)) - as.integer(substring(as.character(pEntrada), 1, 2)))
result[substring(as.character(pAtual), 3, 3) == ""] <- result[substring(as.character(pAtual), 3, 3) == ""] + (1 - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) == ""]
result[substring(as.character(pAtual), 3, 3) != ""] <- result[substring(as.character(pAtual), 3, 3) != ""] + (as.integer(substring(as.character(pAtual), 3, 3)) - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) != ""]
result = result + 1
return(result)
}
periodo <- c("121","122","041","042","131", "121","122", "112", "11" , "11")
matricula <- c("111","111","041","041", "052", "112","112", "112", "101", "102")
fakePeriodo <- data.frame(periodo, matricula)
fakePeriodo[3] <- NA
colnames(fakePeriodo)[3] <- "PeriodoRelativo"
fakePeriodo$PeriodoRelativo = calcularPeriodoRelativo(fakePeriodo$periodo, fakePeriodo$matricula)
View(fakePeriodo)
# Dado um periodo letivo qualquer e o periodo de entrada no curso esta função retorna um numero que representa o periodo relativo ao periodo de entrada.
# O formato do periodo deve ser 3 digitos, os dois primeiros para o ano e o terceiro para o semestre.
# Ex. Um aluno entrou no curso no periodo 2011.1 e está em 2013.2, entao as entradas devem ser 111 e 132, respectivamente. A saída seria 5 (quinto período).
calcularPeriodoRelativo <- function(pAtual, pEntrada){
result = 2 * (as.integer(substring(as.character(pAtual), 1, 2)) - as.integer(substring(as.character(pEntrada), 1, 2)))
result[substring(as.character(pAtual), 3, 3) == ""] <- result[substring(as.character(pAtual), 3, 3) == ""] + (1 - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) == ""]
result[substring(as.character(pAtual), 3, 3) != ""] <- result[substring(as.character(pAtual), 3, 3) != ""] + (as.integer(substring(as.character(pAtual), 3, 3)) - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) != ""]
result = result + 1
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('ccc2/data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PERIODORELATIVO"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PERIODORELATIVO = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,5), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
write.csv(notaDisciplDF, file = "data/arquivo_notas_disciplinas_periodo.csv", row.names = FALSE, quote = FALSE)
# Dado um periodo letivo qualquer e o periodo de entrada no curso esta função retorna um numero que representa o periodo relativo ao periodo de entrada.
# O formato do periodo deve ser 3 digitos, os dois primeiros para o ano e o terceiro para o semestre.
# Ex. Um aluno entrou no curso no periodo 2011.1 e está em 2013.2, entao as entradas devem ser 111 e 132, respectivamente. A saída seria 5 (quinto período).
calcularPeriodoRelativo <- function(pAtual, pEntrada){
result = 2 * (as.integer(substring(as.character(pAtual), 1, 2)) - as.integer(substring(as.character(pEntrada), 1, 2))) # Pega o ano do periodo atual, subtrai do ano de entrada do aluno e depois multiplica por 2
result[substring(as.character(pAtual), 3, 3) == ""] <- result[substring(as.character(pAtual), 3, 3) == ""] + (1 - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) == ""] # Testa se o aluno pagou a disciplina nas ferias
result[substring(as.character(pAtual), 3, 3) != ""] <- result[substring(as.character(pAtual), 3, 3) != ""] + (as.integer(substring(as.character(pAtual), 3, 3)) - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) != ""] # Testa se o aluno nao pagou a disciplina nas ferias
result = result + 1 # Acrescenta-se um ao resultado.
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('ccc2/data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PERIODORELATIVO"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PERIODORELATIVO = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,5), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
View(notaDisciplDF)
write.csv(notaDisciplDF, file = "data/arquivo_notas_disciplinas_periodo.csv", row.names = FALSE, quote = FALSE)
# Dado um periodo letivo qualquer e o periodo de entrada no curso esta função retorna um numero que representa o periodo relativo ao periodo de entrada.
# O formato do periodo deve ser 3 digitos, os dois primeiros para o ano e o terceiro para o semestre.
# Ex. Um aluno entrou no curso no periodo 2011.1 e está em 2013.2, entao as entradas devem ser 111 e 132, respectivamente. A saída seria 5 (quinto período).
calcularPeriodoRelativo <- function(pAtual, pEntrada){
result = 2 * (as.integer(substring(as.character(pAtual), 1, 2)) - as.integer(substring(as.character(pEntrada), 1, 2))) # Pega o ano do periodo atual, subtrai do ano de entrada do aluno e depois multiplica por 2
result[substring(as.character(pAtual), 3, 3) == ""] <- result[substring(as.character(pAtual), 3, 3) == ""] + (1 - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) == ""] # Testa se o aluno pagou a disciplina nas ferias
result[substring(as.character(pAtual), 3, 3) != ""] <- result[substring(as.character(pAtual), 3, 3) != ""] + (as.integer(substring(as.character(pAtual), 3, 3)) - as.integer(substring(as.character(pEntrada), 3, 3)))[substring(as.character(pAtual), 3, 3) != ""] # Testa se o aluno nao pagou a disciplina nas ferias
result = result + 1 # Acrescenta-se um ao resultado.
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('ccc2/data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PERIODORELATIVO"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PERIODORELATIVO = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,5), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
View(notaDisciplDF)
notaDisciplDF$PERIODORELATIVO
install.packages("RUnit")
library('RUnit')
test.examples <- function(){
checkEquals(c("3","4", "1", "2", "16", "2", "3", "1", "3", "2"), fakePeriodo$PeriodoRelativo)
}
source('src/R/util.R')
#Falta baixar a biblioteca!
install.packages("RUnit")
library('RUnit')
test.examples <- function(){
checkEquals(c("3","4", "1", "2", "16", "2", "3", "1", "3", "2"), fakePeriodo$PeriodoRelativo)
}
source('src/R/util.R')
periodo <- c("121","122","041","042","131", "121","122", "112", "11" , "11")
matricula <- c("111","111","041","041", "052", "112","112", "112", "101", "102")
fakePeriodo <- data.frame(periodo, matricula)
fakePeriodo[3] <- NA
colnames(fakePeriodo)[3] <- "PeriodoRelativo"
fakePeriodo$PeriodoRelativo = calcularPeriodoRelativo(fakePeriodo$periodo, fakePeriodo$matricula)
install.packages("RUnit")
fix(calcularPeriodoRelativo)
fix(test.examples)
fix(periodo)
View(fakePeriodo)
test.suite <- defineTestSuite("util", dirs = file.path("src/R/"), testFileRegexp = '^\\d+\\.R')
#Falta baixar a biblioteca!
install.packages("RUnit")
library('RUnit')
test.exemplo <- function(){
checkEquals(c("3","4", "1", "2", "16", "2", "3", "1", "3", "2"), fakePeriodo$PeriodoRelativo)
}
source('src/R/util.R')
periodo <- c("121","122","041","042","131", "121","122", "112", "11" , "11")
matricula <- c("111","111","041","041", "052", "112","112", "112", "101", "102")
fakePeriodo <- data.frame(periodo, matricula)
fakePeriodo[3] <- NA
colnames(fakePeriodo)[3] <- "PeriodoRelativo"
fakePeriodo$PeriodoRelativo = calcularPeriodoRelativo(fakePeriodo$periodo, fakePeriodo$matricula)
#test.suite <- defineTestSuite("util", dirs = file.path("src/R/"), testFileRegexp = '^\\d+\\.R')
test.result <- runTestSuite(test.exemplo)
printTextProtocol(test.result)
#Falta baixar a biblioteca!
install.packages("RUnit")
library('RUnit')
test.exemplo <- function(){
checkEquals(c("3","4", "1", "2", "16", "2", "3", "1", "3", "2"), fakePeriodo$PeriodoRelativo)
}
source('src/R/util.R')
periodo <- c("121","122","041","042","131", "121","122", "112", "11" , "11")
matricula <- c("111","111","041","041", "052", "112","112", "112", "101", "102")
fakePeriodo <- data.frame(periodo, matricula)
fakePeriodo[3] <- NA
colnames(fakePeriodo)[3] <- "PeriodoRelativo"
fakePeriodo$PeriodoRelativo = calcularPeriodoRelativo(fakePeriodo$periodo, fakePeriodo$matricula)
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/"), testFileRegexp = 'teste\\.R')
test.result <- runTestSuite(test.exemplo)
printTextProtocol(test.result)
install.packages("RUnit")
install.packages("RUnit")
library('RUnit')
test.exemplo <- function(){
checkEquals(c("3","4", "1", "2", "16", "2", "3", "1", "3", "2"), fakePeriodo$PeriodoRelativo)
}
source('src/R/util.R')
periodo <- c("121","122","041","042","131", "121","122", "112", "11" , "11")
matricula <- c("111","111","041","041", "052", "112","112", "112", "101", "102")
fakePeriodo <- data.frame(periodo, matricula)
fakePeriodo[3] <- NA
colnames(fakePeriodo)[3] <- "PeriodoRelativo"
fakePeriodo$PeriodoRelativo = calcularPeriodoRelativo(fakePeriodo$periodo, fakePeriodo$matricula)
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/"), testFileRegexp = 'teste\\.R')
test.result <- runTestSuite(test.exemplo)
printTextProtocol(test.result)
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/"), testFileRegexp = 'teste\\.R')
fix(test.suite)
#Falta baixar a biblioteca!
install.packages("RUnit")
library('RUnit')
source('src/R/util.R')
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/"), testFileRegexp = 'testando\\.R')
test.result <- runTestSuite(test.exemplo)
printTextProtocol(test.result)
install.packages("RUnit")
library('RUnit')
source('src/R/util.R')
install.packages("RUnit")
library('RUnit')
source('src/R/util.R')
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/"), testFileRegexp = 'testando\\.R')
test.result <- runTestSuite(test.exemplo)
printTextProtocol(test.result)
install.packages("RUnit")
library('RUnit')
source('src/R/util.R')
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/"), testFileRegexp = 'testando\\.R')
test.result <- runTestSuite(test.exemplo)
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/"), testFileRegexp = 'testando\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
library('RUnit')
source('src/R/util.R')
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/"), testFileRegexp = 'testando\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
notaDisciplDF = read.csv('ccc2/data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PERIODORELATIVO"
notaDisciplDF$PERIODORELATIVO = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,5), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
View(notaDisciplDF)
printTextProtocol(test.result)
library('RUnit')
source('src/R/util.R')
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/"), testFileRegexp = 'testando\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
library('RUnit')
source('src/R/util.R')
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/"), testFileRegexp = 'testando\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
library('RUnit')
source('src/R/util.R')
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/"), testFileRegexp = 'testando\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
periodo <- c("121","122","041","042","131", "121","122", "112", "11" , "11")
matricula <- c("111","111","041","041", "052", "112","112", "112", "101", "102")
fakePeriodo <- data.frame(periodo, matricula)
fakePeriodo[3] <- NA
colnames(fakePeriodo)[3] <- "PeriodoRelativo"
fakePeriodo$PeriodoRelativo = calcularPeriodoRelativo(fakePeriodo$periodo, fakePeriodo$matricula)
notaDisciplDF = read.csv('ccc2/data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PERIODORELATIVO"
notaDisciplDF$PERIODORELATIVO = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,5), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
test.testando <- function(){
checkEquals(c(3,4, 1, 2, 16, 2, 3, 1, 3, 2), fakePeriodo$PeriodoRelativo)
checkEquals(16, max(notaDisciplDF$PERIODORELATIVO))
checkEquals(1, min(notaDisciplDF$PERIODORELATIVO))
}
source('src/R/funcao_Disciplina_Por_Periodo.R')
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('ccc2/data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PERIODORELATIVO"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PERIODORELATIVO = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,5), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
View(notaDisciplDF)
notaDisciplDF$PERIODORELATIVO
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/testes"), testFileRegexp = 'testando\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
test.suite <- defineTestSuite("exemplo", dirs = file.path("src/R/testes"), testFileRegexp = 'Escrevendo_os_testes_Disciplina_Por_Periodo\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
#Chama a funcao de calcular o periodo da disciplina
source('src/R/funcao_Disciplina_Por_Periodo.R')
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('ccc2/data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PERIODORELATIVO"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PERIODORELATIVO = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,5), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
View(notaDisciplDF)
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
test.suite <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Escrevendo_os_testes_Disciplina_Por_Periodo\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
install.packages("RUnit")
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
test.suite <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = '^\\s+\\.\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
install.packages("RUnit")
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
test.suite <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = '^\\s+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
notaDisciplDF = read.csv('data/arquivo_notas_disciplinas_periodo.csv')
install.packages("reshape")
require(plyr)
# Cria uma tabela com o codigo das disciplinas, o nome das disciplinas, o seu periodo relativo e a frenquencia absoluta de cada disciplina, todos em colunas
tabelaFrequencia <- ddply(notaDisciplDF, .(CODIGO, DISCIPLINA, PERIODORELATIVO), nrow)
#Ordena a tabela criada pelo periodo relativo, ainda em coluna
tabelaFrequencia <- tabelaFrequencia[with(tabelaFrequencia, order(PERIODORELATIVO)), ]
# Alterna os periodos relativos para linha, criando assim os 16 periodos do curso e ja colocando a sua frequencia absoluta no local que lhe cabe
tabelaFrequencia <- reshape(tabelaFrequencia, idvar = c("CODIGO", "DISCIPLINA"), timevar = "PERIODORELATIVO", direction = "wide")
tabelaFrequencia[,3:18][is.na(tabelaFrequencia[,3:18])] = 0
# Antes de executar este script, deve-se setar o Working Directory para "ccc-analytics-2.0 /" conforme seu repositório local
notaDisciplDF = read.csv('data/arquivo_notas_disciplinas_periodo.csv')
install.packages("reshape")
require(plyr)
# Cria uma tabela com o codigo das disciplinas, o nome das disciplinas, o seu periodo relativo e a frenquencia absoluta de cada disciplina, todos em colunas
tabelaFrequencia <- ddply(notaDisciplDF, .(CODIGO, DISCIPLINA, PERIODORELATIVO), nrow)
#Ordena a tabela criada pelo periodo relativo, ainda em coluna
tabelaFrequencia <- tabelaFrequencia[with(tabelaFrequencia, order(PERIODORELATIVO)), ]
# Alterna os periodos relativos para linha, criando assim os 16 periodos do curso e ja colocando a sua frequencia absoluta no local que lhe cabe
tabelaFrequencia <- reshape(tabelaFrequencia, idvar = c("CODIGO", "DISCIPLINA"), timevar = "PERIODORELATIVO", direction = "wide")
tabelaFrequencia[,3:18][is.na(tabelaFrequencia[,3:18])] = 0
View(tabelaFrequencia)
write.csv(tabelaFrequencia, file = "data/arquivo_frequencia_absoluta.csv", row.names = FALSE, quote = FALSE)
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
#Definições de funções úteis neste
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
freqAbsluta = read.csv('data/arquivo_frequencia_absoluta.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
#colunas que contem as frequencias dos períodos
colunasUteis = 3:18
#Substitui NA por 0 (ZERO) para operações aritmeticas
freqAbsluta[,colunasUteis][is.na(freqAbsluta[,colunasUteis])] = 0
require(plyr)
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$CODIGO
#Vetor com a maior frequencia da disciplina observada em um período letivo
maiorFreq = apply(freqAbsluta[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(freqAbsluta[colunasUteis])
discMaisComumPeriodo = freqAbsluta[, c("CODIGO", "DISCIPLINA")]
discMaisComumPeriodo[, "PerMaisFreq1st"] = apply(freqAbsluta[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FreqRelativa1st"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PerMaisFreq2nd"] = apply(freqAbsluta[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FreqRelativa2nd"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PerMaisFreq3rd"] = apply(freqAbsluta[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FreqRelativa3rd"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TotalDeAlunosPorDisciplina"] = totalFreq
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$CODIGO,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TipoDeDisciplina"))
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
#Definições de funções úteis neste
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
freqAbsluta = read.csv('data/arquivo_frequencia_absoluta.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
#colunas que contem as frequencias dos períodos
colunasUteis = 3:18
#Substitui NA por 0 (ZERO) para operações aritmeticas
freqAbsluta[,colunasUteis][is.na(freqAbsluta[,colunasUteis])] = 0
require(plyr)
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$CODIGO
#Vetor com a maior frequencia da disciplina observada em um período letivo
maiorFreq = apply(freqAbsluta[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(freqAbsluta[colunasUteis])
discMaisComumPeriodo = freqAbsluta[, c("CODIGO", "DISCIPLINA")]
discMaisComumPeriodo[, "PerMaisFreq1st"] = apply(freqAbsluta[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FreqRelativa1st"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PerMaisFreq2nd"] = apply(freqAbsluta[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FreqRelativa2nd"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PerMaisFreq3rd"] = apply(freqAbsluta[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FreqRelativa3rd"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TotalDeAlunosPorDisciplina"] = totalFreq
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$CODIGO,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TipoDeDisciplina"))
View(discMaisComumPeriodo)
blocMaisComum1 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PerMaisFreq1st)),]
blocMaisComum2 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PerMaisFreq2nd)),]
blocMaisComum3 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PerMaisFreq3rd)),]
View(blocMaisComum1)
View(blocMaisComum2)
View(blocMaisComum3)
