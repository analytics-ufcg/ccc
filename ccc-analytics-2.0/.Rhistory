infoDisciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv")
test.testando <- function(){
checkEquals(44, nrow(infoDisciplinas[infoDisciplinas$TIPODEDISCIPLINA == "OBG",]))
checkEquals(111, nrow(infoDisciplinas[infoDisciplinas$TIPODEDISCIPLINA == "OPT",]))
}
infoDisciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv")
test.testando <- function(){
checkEquals(44, nrow(infoDisciplinas[infoDisciplinas$TIPODEDISCIPLINA == "OBG",]))
checkEquals(111, nrow(infoDisciplinas[infoDisciplinas$TIPODEDISCIPLINA == "OPT",]))
}
fix(test.testando)
View(infoDisciplinas)
install.packages("RUnit")
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
#
test.suiteDisciplinaPorPeriodo <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Escrevendo_os_testes_Disciplina_Por_Periodo\\.R')
test.suiteFrequenciaAbsoluta <- defineTestSuite("teste", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Absoluta\\.R')
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina.R\\.R')
#
test.resultDisciplinaPorPeriodo <- runTestSuite(test.suiteDisciplinaPorPeriodo)
test.resultFrequenciaAbsoluta <- runTestSuite(test.suiteFrequenciaAbsoluta)
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
#
printTextProtocol(test.resultDisciplinaPorPeriodo)
printTextProtocol(test.resultFrequenciaAbsoluta)
printTextProtocol(test.resultInformacaoDeDisciplina)
nrow(infoDisciplinas[infoDisciplinas$TIPODEDISCIPLINA == "OBG",])
nrow(infoDisciplinas[infoDisciplinas$TIPODEDISCIPLINA == "OPT",])
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
#
test.suiteDisciplinaPorPeriodo <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Escrevendo_os_testes_Disciplina_Por_Periodo\\.R')
test.suiteFrequenciaAbsoluta <- defineTestSuite("teste_frequencia_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Absoluta\\.R')
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste_informacao_de_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina.R\\.R')
#
test.resultDisciplinaPorPeriodo <- runTestSuite(test.suiteDisciplinaPorPeriodo)
test.resultFrequenciaAbsoluta <- runTestSuite(test.suiteFrequenciaAbsoluta)
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
#
printTextProtocol(test.resultDisciplinaPorPeriodo)
printTextProtocol(test.resultFrequenciaAbsoluta)
printTextProtocol(test.resultInformacaoDeDisciplina)
infoDisciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv")
View(infoDisciplinas)
test.testando <- function(){
checkEquals(44, nrow(infoDisciplinas[infoDisciplinas$TIPODEDISCIPLINA == "OBG",]))
checkEquals(101, nrow(infoDisciplinas[infoDisciplinas$TIPODEDISCIPLINA == "OPT",]))
}
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste_informacao_de_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina.R\\.R')
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
printTextProtocol(test.resultInformacaoDeDisciplina)
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste_informacao_de_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina\\.R')
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
printTextProtocol(test.resultInformacaoDeDisciplina)
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
#
test.suiteDisciplinaPorPeriodo <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Escrevendo_os_testes_Disciplina_Por_Periodo\\.R')
test.suiteFrequenciaAbsoluta <- defineTestSuite("teste_frequencia_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Absoluta\\.R')
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste_informacao_de_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina\\.R')
#
test.resultDisciplinaPorPeriodo <- runTestSuite(test.suiteDisciplinaPorPeriodo)
test.resultFrequenciaAbsoluta <- runTestSuite(test.suiteFrequenciaAbsoluta)
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
#
printTextProtocol(test.resultDisciplinaPorPeriodo)
printTextProtocol(test.resultFrequenciaAbsoluta)
printTextProtocol(test.resultInformacaoDeDisciplina)
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
#
test.suiteDisciplinaPorPeriodo <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Testes_Disciplina_Por_Periodo\\.R')
test.suiteFrequenciaAbsoluta <- defineTestSuite("teste_frequencia_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Absoluta\\.R')
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste_informacao_de_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina\\.R')
#
test.resultDisciplinaPorPeriodo <- runTestSuite(test.suiteDisciplinaPorPeriodo)
test.resultFrequenciaAbsoluta <- runTestSuite(test.suiteFrequenciaAbsoluta)
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
#
printTextProtocol(test.resultDisciplinaPorPeriodo)
printTextProtocol(test.resultFrequenciaAbsoluta)
printTextProtocol(test.resultInformacaoDeDisciplina)
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
freqAbsluta = read.csv('data/arquivo_frequencia_absoluta.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
#colunas que contem as frequencias dos períodos
colunasUteis = 3:18
#Substitui NA por 0 (ZERO) para operações aritmeticas
freqAbsluta[,colunasUteis][is.na(freqAbsluta[,colunasUteis])] = 0
require(plyr)
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$CODIGO
#Vetor com a maior frequencia da disciplina observada em um período letivo
maiorFreq = apply(freqAbsluta[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(freqAbsluta[colunasUteis])
discMaisComumPeriodo = freqAbsluta[, c("CODIGO", "DISCIPLINA")]
discMaisComumPeriodo[, "PerMaisFreq1st"] = apply(freqAbsluta[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FreqRelativa1st"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PerMaisFreq2nd"] = apply(freqAbsluta[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FreqRelativa2nd"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PerMaisFreq3rd"] = apply(freqAbsluta[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FreqRelativa3rd"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TotalDeAlunosPorDisciplina"] = totalFreq
View(discMaisComumPeriodo)
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$CODIGO,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TipoDeDisciplina"))
write.csv(discMaisComumPeriodo, file = "data/maiores_frequencias_por_disciplina.csv", row.names = FALSE, quote = FALSE)
View(discMaisComumPeriodo)
#Definições de funções úteis neste
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
freqAbsluta = read.csv('data/arquivo_frequencia_absoluta.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
#colunas que contem as frequencias dos períodos
colunasUteis = 3:18
#Substitui NA por 0 (ZERO) para operações aritmeticas
freqAbsluta[,colunasUteis][is.na(freqAbsluta[,colunasUteis])] = 0
require(plyr)
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$CODIGO
#Vetor com a maior frequencia da disciplina observada em um período letivo
maiorFreq = apply(freqAbsluta[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(freqAbsluta[colunasUteis])
discMaisComumPeriodo = freqAbsluta[, c("CODIGO", "DISCIPLINA")]
discMaisComumPeriodo[, "PERMAISFREQ1ST"] = apply(freqAbsluta[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FREQRELATIVA1ST"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ2ND"] = apply(freqAbsluta[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FREQRELATIVA2ND"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ3RD"] = apply(freqAbsluta[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FREQRELATIVA3RD"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TOTALDEALUNOSPORDISCIPLINA"] = totalFreq
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$CODIGO,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TIPODEDISCIPLINA"))
View(discMaisComumPeriodo)
write.csv(discMaisComumPeriodo, file = "data/maiores_frequencias_por_disciplina.csv", row.names = FALSE, quote = FALSE)
blocMaisComum1 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PerMaisFreq1st)),]
blocMaisComum2 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PerMaisFreq2nd)),]
blocMaisComum3 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PerMaisFreq3rd)),]
blocMaisComum1 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PERMAISFREQ1ST)),]
blocMaisComum2 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PERMAISFREQ2ND)),]
blocMaisComum3 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PERMAISFREQ3RD)),]
View(blocMaisComum1)
View(blocMaisComum2)
View(blocMaisComum3)
View(blocMaisComum2)
04121557f
04121557
0.4121557f
0.4121557
checkEquals(round(434/1053, digits = 7), maioresFrequencias[maioresFrequencias$CODIGO == "1108089", maioresFrequencias$PERMAISFREQ1ST])
maioresFrequencias = read.csv("data/maiores_frequencias_por_disciplina.csv")
freqDisciplDF = read.csv("data/arquivo_frequencia_absoluta.csv")
checkEquals(round(434/1053, digits = 7), maioresFrequencias[maioresFrequencias$CODIGO == "1108089", maioresFrequencias$PERMAISFREQ1ST])
checkEquals(round(434/1053, digits = 7), maioresFrequencias[maioresFrequencias$CODIGO == "1108089", 4])
round(434/1053, digits = 7)
maioresFrequencias[maioresFrequencias$CODIGO == "1108089", 4]
num <-maioresFrequencias[maioresFrequencias$CODIGO == "1108089", 4]
checkEquals(round(434/1053, digits = 7), num)
checkEquals(round(434/1053, digits = 7), round(num, digits = 7))
checkEquals(round(434/1053, digits = 7), round(maioresFrequencias[maioresFrequencias$CODIGO == "1108089", 4], digits = 7))
freqDisciplDF = read.csv("data/arquivo_frequencia_absoluta.csv")
maioresFrequencias = read.csv("data/maiores_frequencias_por_disciplina.csv")
test.testando <- function(){
#Fisica classica
checkEquals(round(434/1053, digits = 7), round(maioresFrequencias[maioresFrequencias$CODIGO == "1108089", 4], digits = 7))
checkEquals(round(235/1053, digits = 7), round(maioresFrequencias[maioresFrequencias$CODIGO == "1108089", 6], digits = 7))
checkEquals(round(166/1053, digits = 7), round(maioresFrequencias[maioresFrequencias$CODIGO == "1108089", 8], digits = 7))
#
}
checkEquals(round(434/1053, digits = 7), round(maioresFrequencias[maioresFrequencias$CODIGO == "1108089", 4], digits = 7))
checkEquals(round(235/1053, digits = 7), round(maioresFrequencias[maioresFrequencias$CODIGO == "1108089", 6], digits = 7))
checkEquals(round(166/1053, digits = 7), round(maioresFrequencias[maioresFrequencias$CODIGO == "1108089", 8], digits = 7))
checkTrue(round(1049/1152, digits = 7), round(maioresFrequencias[maioresFrequencias$CODIGO == "1411174", 4], digits = 7))
checkEquals(round(1049/1152, digits = 7), round(maioresFrequencias[maioresFrequencias$CODIGO == "1411174", 4], digits = 7))
checkEquals(round(79/1152, digits = 7), round(maioresFrequencias[maioresFrequencias$CODIGO == "1411174", 6], digits = 7))
checkEquals(round(14/1152, digits = 7), round(maioresFrequencias[maioresFrequencias$CODIGO == "1411174", 8], digits = 7))
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
#
test.suiteDisciplinaPorPeriodo <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Testes_Disciplina_Por_Periodo\\.R')
test.suiteFrequenciaAbsoluta <- defineTestSuite("teste_frequencia_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Absoluta\\.R')
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste_informacao_de_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina\\.R')
test.suiteFrequenciaRelativa <- defineTestSuite("teste_frequencia_relativa", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Relativa\\.R')
#
test.resultDisciplinaPorPeriodo <- runTestSuite(test.suiteDisciplinaPorPeriodo)
test.resultFrequenciaAbsoluta <- runTestSuite(test.suiteFrequenciaAbsoluta)
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
test.resultFrequenciaRelativa <- runTestSuite(test.suiteFrequenciaRelativa)
#
printTextProtocol(test.resultDisciplinaPorPeriodo)
printTextProtocol(test.resultFrequenciaAbsoluta)
printTextProtocol(test.resultInformacaoDeDisciplina)
printTextProtocol(test.resultFrequenciaRelativa)
View(maioresFrequencias)
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
setwd("ccc/ccc-analytics-2.0/")
#Definições de funções úteis neste
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
freqAbsluta = read.csv('data/arquivo_frequencia_absoluta.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
#colunas que contem as frequencias dos períodos
colunasUteis = 3:18
#Substitui NA por 0 (ZERO) para operações aritmeticas
freqAbsluta[,colunasUteis][is.na(freqAbsluta[,colunasUteis])] = 0
require(plyr)
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$CODIGO
#Vetor com a maior frequencia da disciplina observada em um período letivo
maiorFreq = apply(freqAbsluta[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(freqAbsluta[colunasUteis])
discMaisComumPeriodo = freqAbsluta[, c("CODIGO", "DISCIPLINA")]
discMaisComumPeriodo[, "PERMAISFREQ1ST"] = apply(freqAbsluta[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FREQRELATIVA1ST"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ2ND"] = apply(freqAbsluta[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FREQRELATIVA2ND"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ3RD"] = apply(freqAbsluta[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FREQRELATIVA3RD"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TOTALDEALUNOSPORDISCIPLINA"] = totalFreq
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$CODIGO,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TIPODEDISCIPLINA"))
blocMaisComum1 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PERMAISFREQ1ST)),]
View(blocMaisComum1)
View(blocMaisComum1)
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
#
test.suiteDisciplinaPorPeriodo <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Testes_Disciplina_Por_Periodo\\.R')
test.suiteFrequenciaAbsoluta <- defineTestSuite("teste_frequencia_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Absoluta\\.R')
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste_informacao_de_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina\\.R')
test.suiteFrequenciaRelativa <- defineTestSuite("teste_frequencia_relativa", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Relativa\\.R')
#
test.resultDisciplinaPorPeriodo <- runTestSuite(test.suiteDisciplinaPorPeriodo)
test.resultFrequenciaAbsoluta <- runTestSuite(test.suiteFrequenciaAbsoluta)
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
test.resultFrequenciaRelativa <- runTestSuite(test.suiteFrequenciaRelativa)
#
printTextProtocol(test.resultDisciplinaPorPeriodo)
printTextProtocol(test.resultFrequenciaAbsoluta)
printTextProtocol(test.resultInformacaoDeDisciplina)
printTextProtocol(test.resultFrequenciaRelativa)
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
setwd("ccc/ccc-analytics-2.0/")
#Definições de funções úteis neste
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
freqAbsluta = read.csv('data/arquivo_frequencia_absoluta.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
#colunas que contem as frequencias dos períodos
colunasUteis = 3:18
#Substitui NA por 0 (ZERO) para operações aritmeticas
freqAbsluta[,colunasUteis][is.na(freqAbsluta[,colunasUteis])] = 0
require(plyr)
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$CODIGO
#Vetor com a maior frequencia da disciplina observada em um período letivo
maiorFreq = apply(freqAbsluta[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(freqAbsluta[colunasUteis])
discMaisComumPeriodo = freqAbsluta[, c("CODIGO", "DISCIPLINA")]
discMaisComumPeriodo[, "PERMAISFREQ1ST"] = apply(freqAbsluta[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FREQRELATIVA1ST"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ2ND"] = apply(freqAbsluta[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FREQRELATIVA2ND"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ3RD"] = apply(freqAbsluta[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FREQRELATIVA3RD"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TOTALDEALUNOSPORDISCIPLINA"] = totalFreq
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$CODIGO,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TIPODEDISCIPLINA"))
write.csv(discMaisComumPeriodo, file = "data/maiores_frequencias_por_disciplina.csv", row.names = FALSE, quote = FALSE)
df.notas.disciplinas = read.csv("github/ccc/ccc-analytics-2.0/data/arquivo_notas_disciplinas.csv",stringsAsFactors=F)
df.notas.disciplinas = read.csv("/ccc2/data/historico-ccc.csv",stringsAsFactors=F)
df.notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
df.info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
View(df.info.disciplinas)
View(df.notas.disciplinas)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[df.notas.disciplinas$SITUACAO == "APROVADO"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "APROVADO"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "REPROVADO"] <- 1
View(notas.disciplinas)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado"] <- 1
View(notas.disciplinas)
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
a = df.notas.disciplinas$SITUACAO[1]
a = notas.disciplinas$SITUACAO[1]
resultado.absoluto = aggregate(SITUACAO ~ PERIODO + CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ PERIODO + CODIGO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, resultado.relativo$SITUACAO)
View(resultado)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado"] <- 1
info.disciplinas <- info.disciplinas[-6,]#remover algebra linear incorreta
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
#a = notas.disciplinas$SITUACAO[1]
resultado.absoluto = aggregate(SITUACAO ~ PERIODO + CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ PERIODO + CODIGO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, resultado.relativo$SITUACAO)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado"] <- 1
info.disciplinas <- info.disciplinas[-6,]#remover algebra linear incorreta
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
#a = notas.disciplinas$SITUACAO[1]
resultado.absoluto = aggregate(SITUACAO ~ PERIODO + CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ PERIODO + CODIGO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, resultado.relativo$SITUACAO)
View(info.disciplinas)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado"] <- 1
info.disciplinas <- info.disciplinas[-6,]#remover algebra linear incorreta
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
a = notas.disciplinas$SITUACAO[1]
resultado.absoluto = aggregate(SITUACAO ~ PERIODO + CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ PERIODO + CODIGO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, resultado.relativo$SITUACAO)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado"] <- 1
info.disciplinas <- info.disciplinas[-6,]#remover algebra linear incorreta
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
#a = notas.disciplinas$SITUACAO[1]
resultado.absoluto = aggregate(SITUACAO ~ PERIODO + CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ PERIODO + CODIGO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, resultado.relativo$SITUACAO)
View(notas.disciplinas)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
View(notas.disciplinas)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
View(info.disciplinas)
View(notas.disciplinas)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
View(notas.disciplinas)
View(info.disciplinas)
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
View(info.disciplinas)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
subset(notas.disciplinas, MEDIA=="NA")
View(notas.disciplinas)
subset(notas.disciplinas, SITUACAO=="Trancado")
subset(notas.disciplinas, SITUACAO!="Trancado")
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
subset(notas.disciplinas, SITUACAO!="Trancado")
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado")
View(notas.disciplinas)
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ PERIODO + CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ PERIODO + CODIGO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, resultado.relativo$SITUACAO)
View(resultado)
View(resultado.absoluto)
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" <- resultado.relativo$SITUACAO)
View(resultado)
resultado = cbind(resultado.absoluto, RESULTADORELATIVO <- resultado.relativo$SITUACAO)
View(resultado)
resultado = cbind(resultado.absoluto, RESULTADORELATIVO = resultado.relativo$SITUACAO)
View(resultado)
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
View(resultado)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
View(resultado)
order(resultado$RESULTADORELATIVO)
resultado = order(resultado$RESULTADORELATIVO)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
resultado = resultado[with(resultado, order(RESULTADORELATIVO)),]
View(resultado)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
#Calculo por periodo
#resultado.absoluto = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, sum)
#resultado.relativo = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
resultado = resultado[with(resultado, order(RESULTADORELATIVO)),]
write.csv(resultado, "reprovacoes_por_disciplina_periodo.csv", row.names=F, fileEncoding = "UTF-8")
View(resultado)
View(resultado)
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
#Calculo por periodo
#resultado.absoluto = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, sum)
#resultado.relativo = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
resultado = resultado[with(resultado, order(RESULTADORELATIVO)),]
write.csv(resultado, "data/reprovacoes_por_disciplina.csv", row.names=F, fileEncoding = "UTF-8")
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
#Calculo por periodo
#resultado.absoluto = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, sum)
#resultado.relativo = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
resultado = resultado[with(resultado, order(RESULTADORELATIVO)),]
View(resultado)
write.csv(resultado, "data/reprovacoes_por_disciplina.csv", row.names=F, fileEncoding = "UTF-8")
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
#Calculo por periodo
#resultado.absoluto = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, sum)
#resultado.relativo = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
View(resultado)
