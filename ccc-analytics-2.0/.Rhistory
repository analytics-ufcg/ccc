for (i in 1:k_) {
teste = subset(aluno_disciplina_periodo_merge,cluster == i)
cdata <- ddply(teste, c("coddisciplina","disciplina"), summarize, size    = length(PeriodoRelativo),
Mode = Mode(PeriodoRelativo),media = mean(PeriodoRelativo))
write.csv(cdata,paste("data/",i,"_cluster.csv", sep=""),row.names=FALSE)
}
#aplica agrupamento
hc = hclust(dfToFastcluster,method='ward')
#plotar gráfico da dissimilaridade
plot(plotHeightList(createHeightList(hc$height),20))
#plota dendograma
plot(hc)
require(fastcluster)
library(plyr)
library("ggplot2")
#funcao para criar lista com dissimilaridade a cada junçao de cluster
createHeightList <- function (hcHeight){
tamanho = length(hcHeight)
heightList = c()
for (i in 1:tamanho ) {
heightList[i] = hcHeight[tamanho-i + 1]
}
heightList
}
#funcao para ploar dissmilaridades a cada passo
plotHeightList <- function(heightList,limite){
my_theme <- theme_bw()
my_theme$strip.background <- theme_rect(colour = "grey", fill = colors()[492])
theme_set(my_theme)
dados<-data.frame(x=1:limite, y=heightList[1:limite], group=1)
p <- ggplot(dados, aes(x,y)) + geom_line(size=1)
p <- p + xlab('\nNúmero de grupos') + ylab('Distância média dentro dos grupos') + theme(panel.grid.minor.x=element_blank(), panel.grid.major.x=element_blank())
p <- p + scale_x_continuous(breaks=seq(1, limite, 1))
p
}
#########FUNCAO QUE CALCULA MODA
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
##################################leitura de arquivos
#Dataframe que tu gerou ontem de tarde nos 10 min que tu foi no lab
dataframe = read.csv("data/dissimilaridade_distancia.csv", header = FALSE, sep=",")
#Dataframe com períodos relativos que os alunos pagaram as disciplinas
aluno_disciplina_periodo = read.csv("data/aluno-disciplina-periodo.csv", header = T, sep=",")
#informações das disciplinas - necessário para pegarmos o nome da disciplina
disciplinas= read.csv("data/grade-disciplinas-por-periodo.csv", header = T, sep=",")
#novo DF com nome da disciplina
aluno_disciplina_periodo = merge(aluno_disciplina_periodo, disciplinas[c("disciplina","coddisciplina")], by = "coddisciplina")
#########################################################
################# CRIA MATRIZ DO JEITO CERTO PARA INPUT NO FASTCLUSTER##################
dataframe = dataframe[with(dataframe, order(V1, V2)), ]
matriculas <- with(dataframe, unique(c(as.character(V1), as.character(V2))))
dfToFastcluster <- with(dataframe, structure(V3,
Size = length(matriculas),
Labels = matriculas,
Diag = FALSE,
Upper = FALSE,
method = "user",
class = "dist"))
#######################################################################################
###########################################AGRUPAMENTO
#aplica agrupamento
hc = hclust(dfToFastcluster,method='ward')
#plotar gráfico da dissimilaridade
plot(plotHeightList(createHeightList(hc$height),20))
#plota dendograma
plot(hc)
#número de cluster que vc escolheu
k_ = 6
#determina quais amostras vao para cada cluster
clusters <- cutree(hc, k = k_)
#######################################################################################
##################CRIA DF COM MATRICULA DO ALUNO / CLUSTER QUE ELE FICOU
dataAlunos <- data.frame(matricula = matriculas)
dataAlunos$cluster = 0
for (i in 1:k_) {
dataAlunos[(clusters == i),]$cluster = i
}
#################DF COM INFORMAÇOES que o aluno pagou a disciplina em tal período, agora com o cluster do aluno(necessário para calcular a moda)
aluno_disciplina_periodo_merge = merge(aluno_disciplina_periodo, dataAlunos, by = "matricula")
teste = subset(aluno_disciplina_periodo_merge,cluster ==1)
ddply(teste, c("coddisciplina","disciplina"), summarize, size    = length(PeriodoRelativo),
Mode = Mode(PeriodoRelativo),media = mean(PeriodoRelativo))
########################SALVA K ARQUIVOS, COM A BLOCAGEM COMUM PARA CADA CLUSTER, BASEADO NA MODA.
for (i in 1:k_) {
teste = subset(aluno_disciplina_periodo_merge,cluster == i)
cdata <- ddply(teste, c("coddisciplina","disciplina"), summarize, size    = length(PeriodoRelativo),
Mode = Mode(PeriodoRelativo),media = mean(PeriodoRelativo))
write.csv(cdata,paste("data/",i,"_cluster.csv", sep=""),row.names=FALSE)
}
fix(plotHeightList)
fix(createHeightList)
notaDisciplDF = read.csv('data/arquivo_notas_disciplinas.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
require(plyr)
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$coddisciplina
infoDisciplinas <- ddply(notaDisciplDF, .(coddisciplina, disciplina, departamento), nrow)
infoDisciplinas[4] <- "OPT"
infoDisciplinas[is.element(infoDisciplinas$coddisciplina,disciplinasObrigatorias),]$V1 = "OBG"
infoDisciplinas <- rename(infoDisciplinas, replace = c("V1" = "TipoDeDisciplina"))
setwd(../..)
setwd("~/Desenvolvimento/ccc/ccc-analytics")
setwd("~/Desenvolvimento/ccc/ccc-analytics-2.0")
ls
notaDisciplDF = read.csv('data/arquivo_notas_disciplinas.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
require(plyr)
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$coddisciplina
infoDisciplinas <- ddply(notaDisciplDF, .(coddisciplina, disciplina, departamento), nrow)
infoDisciplinas[4] <- "OPT"
infoDisciplinas[is.element(infoDisciplinas$coddisciplina,disciplinasObrigatorias),]$V1 = "OBG"
infoDisciplinas <- rename(infoDisciplinas, replace = c("V1" = "TipoDeDisciplina"))
View(notaDisciplDF)
View(infoDisciplinas)
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
#Definições de funções úteis neste
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
freqAbsluta = read.csv('data/arquivo_frequencia_absoluta.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
#colunas que contem as frequencias dos períodos
colunasUteis = 3:18
#Substitui NA por 0 (ZERO) para operações aritmeticas
freqAbsluta[,colunasUteis][is.na(freqAbsluta[,colunasUteis])] = 0
require(plyr)
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$coddisciplina
#Vetor com a maior frequencia da disciplina observada em um período letivo
maiorFreq = apply(freqAbsluta[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(freqAbsluta[colunasUteis])
discMaisComumPeriodo = freqAbsluta[, c("coddisciplina", "disciplina")]
discMaisComumPeriodo[, "PerMaisFreq1st"] = apply(freqAbsluta[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FreqRelativa1st"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PerMaisFreq2nd"] = apply(freqAbsluta[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FreqRelativa2nd"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PerMaisFreq3rd"] = apply(freqAbsluta[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FreqRelativa3rd"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TotalDeAlunosPorDisciplina"] = totalFreq
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$coddisciplina,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TipoDeDisciplina"))
write.csv(discMaisComumPeriodo, file = "data/maiores_frequencias_por_disciplina.csv", row.names = FALSE, quote = FALSE)
blocMaisComum1 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PerMaisFreq1st)),]
blocMaisComum2 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PerMaisFreq2nd)),]
blocMaisComum3 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PerMaisFreq3rd)),]
# Antes de executar este script, deve-se setar o Working Directory para "ccc-analytics-2.0 /" conforme seu repositório local
notaDisciplDF = read.csv('data/arquivo_notas_disciplinas_periodo.csv')
install.packages("reshape")
require(plyr)
# Cria uma tabela com o codigo das disciplinas, o nome das disciplinas, o seu periodo relativo e a frenquencia absoluta de cada disciplina, todos em colunas
tabelaFrequencia <- ddply(notaDisciplDF, .(coddisciplina, disciplina, PeriodoRelativo), nrow)
#Ordena a tabela criada pelo periodo relativo, ainda em coluna
tabelaFrequencia <- tabelaFrequencia[with(tabelaFrequencia, order(PeriodoRelativo)), ]
# Alterna os periodos relativos para linha, criando assim os 16 periodos do curso e ja colocando a sua frequencia absoluta no local que lhe cabe
tabelaFrequencia <- reshape(tabelaFrequencia, idvar = c("coddisciplina", "disciplina"), timevar = "PeriodoRelativo", direction = "wide")
tabelaFrequencia[,3:18][is.na(tabelaFrequencia[,3:18])] = 0
write.csv(tabelaFrequencia, file = "data/arquivo_frequencia_absoluta.csv", row.names = FALSE, quote = FALSE)
notaDisciplDF = read.csv('data/arquivo_notas_disciplinas.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
require(plyr)
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$coddisciplina
infoDisciplinas <- ddply(notaDisciplDF, .(coddisciplina, disciplina, departamento), nrow)
infoDisciplinas[4] <- "OPT"
infoDisciplinas[is.element(infoDisciplinas$coddisciplina,disciplinasObrigatorias),]$V1 = "OBG"
infoDisciplinas <- rename(infoDisciplinas, replace = c("V1" = "TipoDeDisciplina"))
write.csv(infoDisciplinas, file = "data/arquivo_informacao_das_disciplinas.csv", row.names = FALSE)
# Dado um periodo letivo qualquer e o periodo de entrada no curso esta funcao retorna um numero que representa o periodo relativo ao periodo de entrada.
# O formato do periodo deve ser 3 digitos, os dois primeiros para o ano e o terceiro para o semestre.
# Ex. Um aluno entrou no curso no periodo 2011.1 e esta em 2013.2, entao as entradas devem ser 111 e 132, respectivamente. A saida seria 5 (quinto periodo).
calcularPeriodoRelativo <- function(pAtual, pEntrada){
result = 2 * (as.integer(substring(as.character(pAtual), 1, 2)) - as.integer(substring(as.character(pEntrada), 1, 2)))
result = result + (as.integer(substring(as.character(pAtual), 3, 3)) - as.integer(substring(as.character(pEntrada), 3, 3)))
result = result + 1
return(result)
}
#Definicoes de funcoes uteis neste
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
install.packages("reshape")
require(plyr)
colunasUteis = 3:18
#Deve-se setar o Working Directory, setwd(), para o diretorio "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('data/arquivo_notas_disciplinas.csv')
notaDisciplDF[12] = notaDisciplDF$periodo
colnames(notaDisciplDF)[12] <- "PeriodoRelativo"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$periodo), 3,5), substring(as.character(notaDisciplDF$matricula), 2,4))
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$coddisciplina
# Cria uma tabela com o codigo das disciplinas, o nome das disciplinas, o seu periodo relativo e a frenquencia absoluta de cada disciplina, todos em colunas
tabelaFrequencia <- ddply(notaDisciplDF, .(coddisciplina, disciplina, matricula, PeriodoRelativo, situacao), nrow)
#Ordena a tabela criada pelo periodo relativo, ainda em coluna
tabelaFrequencia <- tabelaFrequencia[with(tabelaFrequencia, order(PeriodoRelativo)), ]
#Elimina as linhas duplicadas dado os parametros.
tabelaFrequencia <- tabelaFrequencia[!duplicated(tabelaFrequencia[,c('coddisciplina','matricula')]),]
tabelaFrequencia$matricula <- NULL
tabelaFrequencia$situacao <- NULL
tabelaFrequencia <- ddply(tabelaFrequencia, .(coddisciplina, disciplina, PeriodoRelativo), nrow)
tabelaFrequencia <- tabelaFrequencia[with(tabelaFrequencia, order(PeriodoRelativo)), ]
# Alterna os periodos relativos para linha, criando assim os 16 periodos do curso e ja colocando a sua frequencia absoluta no local que lhe cabe
tabelaFrequencia <- reshape(tabelaFrequencia, idvar = c("coddisciplina", "disciplina"), timevar = "PeriodoRelativo", direction = "wide")
#Substitui NA por 0 (ZERO) para operaÃ§Ãµes aritmeticas
tabelaFrequencia[,colunasUteis][is.na(tabelaFrequencia[,colunasUteis])] = 0
#Vetor com a maior frequencia da disciplina observada em um periodo letivo
maiorFreq = apply(tabelaFrequencia[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(tabelaFrequencia[colunasUteis])
discMaisComumPeriodo = tabelaFrequencia[, c("coddisciplina", "disciplina")]
discMaisComumPeriodo[, "PerMaisFreq1st"] = apply(tabelaFrequencia[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FreqRelativa1st"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PerMaisFreq2nd"] = apply(tabelaFrequencia[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FreqRelativa2nd"] = (apply(tabelaFrequencia[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PerMaisFreq3rd"] = apply(tabelaFrequencia[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FreqRelativa3rd"] = (apply(tabelaFrequencia[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TotalDeAlunosPorDisciplina"] = totalFreq
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$coddisciplina,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TipoDeDisciplina"))
write.csv(discMaisComumPeriodo, file = "data/maiores_frequencias_por_disciplina_sem_repeticao.csv", row.names = FALSE, quote = FALSE)
blocMaisComum1 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PerMaisFreq1st)),]
blocMaisComum2 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PerMaisFreq2nd)),]
blocMaisComum3 = discMaisComumPeriodo[with(discMaisComumPeriodo, order(PerMaisFreq3rd)),]
# Dado um periodo letivo qualquer e o periodo de entrada no curso esta função retorna um numero que representa o periodo relativo ao periodo de entrada.
# O formato do periodo deve ser 3 digitos, os dois primeiros para o ano e o terceiro para o semestre.
# Ex. Um aluno entrou no curso no periodo 2011.1 e está em 2013.2, entao as entradas devem ser 111 e 132, respectivamente. A saída seria 5 (quinto período).
calcularPeriodoRelativo <- function(pAtual, pEntrada){
result = 2 * (as.integer(substring(as.character(pAtual), 1, 2)) - as.integer(substring(as.character(pEntrada), 1, 2)))
result = result + (as.integer(substring(as.character(pAtual), 3, 3)) - as.integer(substring(as.character(pEntrada), 3, 3)))
result = result + 1
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('data/arquivo_notas_disciplinas.csv')
notaDisciplDF[12] = notaDisciplDF$periodo
colnames(notaDisciplDF)[12] <- "PeriodoRelativo"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$periodo), 3,5), substring(as.character(notaDisciplDF$matricula), 2,4))
write.csv(notaDisciplDF, file = "data/arquivo_notas_disciplinas_periodo.csv", row.names = FALSE, quote = FALSE)
