}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('/home/celio/Downloads/Dados_historicos_de_notas-Computacao.csvfa')
notaDisciplDF[8] = notaDisciplDF$PERIODO
colnames(notaDisciplDF)[8] <- "PeriodoRelativo"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 1,6), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
notaDisciplDF$MATRICULA
View(notaDisciplDF)
# Dado um periodo letivo qualquer e o periodo de entrada no curso esta função retorna um numero que representa o periodo relativo ao periodo de entrada.
# O formato do periodo deve ser 3 digitos, os dois primeiros para o ano e o terceiro para o semestre.
# Ex. Um aluno entrou no curso no periodo 2011.1 e está em 2013.2, entao as entradas devem ser 111 e 132, respectivamente. A saída seria 5 (quinto período).
calcularPeriodoRelativo <- function(pAtual, pEntrada){
if((as.integer(substring(as.character(pEntrada), 1, 2))) > 90){
resultado = 1900 + as.integer(substring(as.character(pEntrada), 1, 2))
} else{
resultado = 2000 + as.integer(substring(as.character(pEntrada), 1, 2))
}
result = 2 * (as.integer(substring(as.character(pAtual), 1, 4)) - resultado)
result = result + (as.integer(substring(as.character(pAtual), 6, 6)) - as.integer(substring(as.character(pEntrada), 3, 3)))
result = result + 1
return(result)
}
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('/home/celio/Downloads/Dados_historicos_de_notas-Computacao.csv')
notaDisciplDF[8] = notaDisciplDF$PERIODO
colnames(notaDisciplDF)[8] <- "PeriodoRelativo"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PeriodoRelativo = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 1,6), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
#Calculo por periodo
#resultado.absoluto = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, sum)
#resultado.relativo = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
resultado = resultado[with(resultado, order(RESULTADORELATIVO)),]
setwd("/home/celio/Desenvolvimento/ccc/ccc-analytics-2.0")
notas.disciplinas = read.csv("ccc2/data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
#Calculo por periodo
#resultado.absoluto = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, sum)
#resultado.relativo = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
resultado = resultado[with(resultado, order(RESULTADORELATIVO)),]
View(resultado)
#Chama a funcao de calcular o periodo da disciplina
source('src/R/funcao_Disciplina_Por_Periodo.R')
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PERIODORELATIVO"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PERIODORELATIVO = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,5), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
View(notaDisciplDF)
notaDisciplDF = read.csv('data/historico-ccc-original.csv')
View(notaDisciplDF)
substring(as.character(notaDisciplDF), 5, 5)
substring(as.character(notaDisciplDF$PERIODO), 5, 5)
notaDisciplDF = read.csv('data/historico-ccc-original.csv')
notaDisciplDF <- subset(notaDisciplDF, substring(as.character(notaDisciplDF$PERIODO), 5, 5) != "")
notaDisciplDF$PERIODO
as.character(notaDisciplDF$PERIODO)
as.character(notaDisciplDF$PERIODO[5])
as.character(notaDisciplDF$PERIODO)[5]
as.character(notaDisciplDF$PERIODO)
notaDisciplDF = read.csv('data/historico-ccc-original.csv')
as.character(notaDisciplDF$PERIODO)
notaDisciplDF <- subset(notaDisciplDF, substring(as.character(notaDisciplDF$PERIODO), 5, 5) != "")
as.character(notaDisciplDF$PERIODO)
notaDisciplDF = read.csv('data/historico-ccc-original.csv')
notaDisciplDF <- subset(notaDisciplDF, substring(as.character(notaDisciplDF$PERIODO), 5, 5) != "")
write.csv(notaDisciplDF, file = "data/historico-ccc-original.csv", row.names = FALSE, quote = FALSE)
notaDisciplDF = read.csv('data/historico-ccc-original.csv')
as.character(notaDisciplDF$PERIODO)
notaDisciplDF <- subset(notaDisciplDF, substring(as.character(notaDisciplDF$PERIODO), 5, 5) != "")
as.character(notaDisciplDF$PERIODO)
notaDisciplDF = read.csv('data/historico-ccc-original.csv')
notaDisciplDF <- subset(notaDisciplDF, substring(as.character(notaDisciplDF$PERIODO), 5, 5) != "")
write.csv(notaDisciplDF, file = "data/historico-ccc.csv", row.names = FALSE, quote = FALSE)
notaDisciplDF = read.csv('data/historico-ccc-original.csv')
notaDisciplDF <- subset(notaDisciplDF, substring(as.character(notaDisciplDF$PERIODO), 5, 5) != "")
write.csv(notaDisciplDF, file = "data/historico-ccc.csv", row.names = FALSE, quote = FALSE)
#Chama a funcao de calcular o periodo da disciplina
source('src/R/funcao_Disciplina_Por_Periodo.R')
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PERIODORELATIVO"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PERIODORELATIVO = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,5), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
write.csv(notaDisciplDF, file = "data/arquivo_notas_disciplinas_periodo.csv", row.names = FALSE, quote = FALSE)
# Antes de executar este script, deve-se setar o Working Directory para "ccc-analytics-2.0 /" conforme seu repositório local
#setwd("ccc/ccc-analytics-2.0/")
notaDisciplDF = read.csv('data/arquivo_notas_disciplinas_periodo.csv')
install.packages("reshape")
require(plyr)
# Cria uma tabela com o codigo das disciplinas, o nome das disciplinas, o seu periodo relativo e a frenquencia absoluta de cada disciplina, todos em colunas
tabelaFrequencia <- ddply(notaDisciplDF, .(CODIGO, DISCIPLINA, PERIODORELATIVO), nrow)
#Ordena a tabela criada pelo periodo relativo, ainda em coluna
tabelaFrequencia <- tabelaFrequencia[with(tabelaFrequencia, order(PERIODORELATIVO)), ]
# Alterna os periodos relativos para linha, criando assim os 16 periodos do curso e ja colocando a sua frequencia absoluta no local que lhe cabe
tabelaFrequencia <- reshape(tabelaFrequencia, idvar = c("CODIGO", "DISCIPLINA"), timevar = "PERIODORELATIVO", direction = "wide")
tabelaFrequencia[,3:18][is.na(tabelaFrequencia[,3:18])] = 0
write.csv(tabelaFrequencia, file = "data/arquivo_frequencia_absoluta.csv", row.names = FALSE, quote = FALSE)
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
#setwd("ccc/ccc-analytics-2.0/")
#Definições de funções úteis neste
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
freqAbsluta = read.csv('data/arquivo_frequencia_absoluta.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
#colunas que contem as frequencias dos períodos
colunasUteis = 3:18
#Substitui NA por 0 (ZERO) para operações aritmeticas
freqAbsluta[,colunasUteis][is.na(freqAbsluta[,colunasUteis])] = 0
require(plyr)
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$CODIGO
#Vetor com a maior frequencia da disciplina observada em um período letivo
maiorFreq = apply(freqAbsluta[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(freqAbsluta[colunasUteis])
discMaisComumPeriodo = freqAbsluta[, c("CODIGO", "DISCIPLINA")]
discMaisComumPeriodo[, "PERMAISFREQ1ST"] = apply(freqAbsluta[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FREQRELATIVA1ST"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ2ND"] = apply(freqAbsluta[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FREQRELATIVA2ND"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ3RD"] = apply(freqAbsluta[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FREQRELATIVA3RD"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TOTALDEALUNOSPORDISCIPLINA"] = totalFreq
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$CODIGO,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TIPODEDISCIPLINA"))
write.csv(discMaisComumPeriodo, file = "data/maiores_frequencias_por_disciplina.csv", row.names = FALSE, quote = FALSE)
notas.disciplinas = read.csv("data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
#Calculo por periodo
#resultado.absoluto = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, sum)
#resultado.relativo = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
resultado = resultado[with(resultado, order(RESULTADORELATIVO)),]
write.csv(resultado, "data/reprovacoes_por_disciplina.csv", row.names=F, fileEncoding = "UTF-8")
install.packages("RUnit")
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
#
test.suiteDisciplinaPorPeriodo <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Testes_Disciplina_Por_Periodo\\.R')
test.suiteFrequenciaAbsoluta <- defineTestSuite("teste_frequencia_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Absoluta\\.R')
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste_informacao_de_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina\\.R')
test.suiteFrequenciaRelativa <- defineTestSuite("teste_frequencia_relativa", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Relativa\\.R')
test.suiteReprovacaoDisciplina <- defineTestSuite("teste_reprovacao_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Reprovacao_Disciplina\\.R')
#
test.resultDisciplinaPorPeriodo <- runTestSuite(test.suiteDisciplinaPorPeriodo)
test.resultFrequenciaAbsoluta <- runTestSuite(test.suiteFrequenciaAbsoluta)
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
test.resultFrequenciaRelativa <- runTestSuite(test.suiteFrequenciaRelativa)
test.resultReprovacaoDisciplina <- runTestSuite(test.suiteReprovacaoDisciplina)
#
printTextProtocol(test.resultDisciplinaPorPeriodo)
printTextProtocol(test.resultFrequenciaAbsoluta)
printTextProtocol(test.resultInformacaoDeDisciplina)
printTextProtocol(test.resultFrequenciaRelativa)
printTextProtocol(test.resultReprovacaoDisciplina)
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
#
test.suiteDisciplinaPorPeriodo <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Testes_Disciplina_Por_Periodo\\.R')
test.suiteFrequenciaAbsoluta <- defineTestSuite("teste_frequencia_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Absoluta\\.R')
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste_informacao_de_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina\\.R')
test.suiteFrequenciaRelativa <- defineTestSuite("teste_frequencia_relativa", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Relativa\\.R')
test.suiteReprovacaoDisciplina <- defineTestSuite("teste_reprovacao_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Reprovacao_Disciplina\\.R')
#
test.resultDisciplinaPorPeriodo <- runTestSuite(test.suiteDisciplinaPorPeriodo)
test.resultFrequenciaAbsoluta <- runTestSuite(test.suiteFrequenciaAbsoluta)
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
test.resultFrequenciaRelativa <- runTestSuite(test.suiteFrequenciaRelativa)
test.resultReprovacaoDisciplina <- runTestSuite(test.suiteReprovacaoDisciplina)
#
printTextProtocol(test.resultDisciplinaPorPeriodo)
printTextProtocol(test.resultFrequenciaAbsoluta)
printTextProtocol(test.resultInformacaoDeDisciplina)
printTextProtocol(test.resultFrequenciaRelativa)
printTextProtocol(test.resultReprovacaoDisciplina)
notaDisciplDF = read.csv('data/arquivo_notas_disciplinas_periodo.csv')
install.packages("reshape")
require(plyr)
# Cria uma tabela com o codigo das disciplinas, o nome das disciplinas, o seu periodo relativo e a frenquencia absoluta de cada disciplina, todos em colunas
tabelaFrequencia <- ddply(notaDisciplDF, .(CODIGO, DISCIPLINA, PERIODORELATIVO), nrow)
#Ordena a tabela criada pelo periodo relativo, ainda em coluna
tabelaFrequencia <- tabelaFrequencia[with(tabelaFrequencia, order(PERIODORELATIVO)), ]
# Alterna os periodos relativos para linha, criando assim os 16 periodos do curso e ja colocando a sua frequencia absoluta no local que lhe cabe
tabelaFrequencia <- reshape(tabelaFrequencia, idvar = c("CODIGO", "DISCIPLINA"), timevar = "PERIODORELATIVO", direction = "wide")
tabelaFrequencia[,3:18][is.na(tabelaFrequencia[,3:18])] = 0
View(notaDisciplDF)
View(tabelaFrequencia)
40+434+235+166+63+45+23+18+14+7+3+3+1+1
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
#setwd("ccc/ccc-analytics-2.0/")
#Definições de funções úteis neste
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
freqAbsluta = read.csv('data/arquivo_frequencia_absoluta.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
#colunas que contem as frequencias dos períodos
colunasUteis = 3:18
#Substitui NA por 0 (ZERO) para operações aritmeticas
freqAbsluta[,colunasUteis][is.na(freqAbsluta[,colunasUteis])] = 0
require(plyr)
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$CODIGO
#Vetor com a maior frequencia da disciplina observada em um período letivo
maiorFreq = apply(freqAbsluta[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(freqAbsluta[colunasUteis])
discMaisComumPeriodo = freqAbsluta[, c("CODIGO", "DISCIPLINA")]
discMaisComumPeriodo[, "PERMAISFREQ1ST"] = apply(freqAbsluta[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FREQRELATIVA1ST"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ2ND"] = apply(freqAbsluta[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FREQRELATIVA2ND"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ3RD"] = apply(freqAbsluta[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FREQRELATIVA3RD"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TOTALDEALUNOSPORDISCIPLINA"] = totalFreq
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$CODIGO,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TIPODEDISCIPLINA"))
View(freqAbsluta)
View(notaDisciplDF)
View(tabelaFrequencia)
View(freqAbsluta)
View(tabelaFrequencia)
View(disciplinasPeriodoObrigatorias)
View(discMaisComumPeriodo)
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
#
test.suiteDisciplinaPorPeriodo <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Testes_Disciplina_Por_Periodo\\.R')
test.suiteFrequenciaAbsoluta <- defineTestSuite("teste_frequencia_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Absoluta\\.R')
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste_informacao_de_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina\\.R')
test.suiteFrequenciaRelativa <- defineTestSuite("teste_frequencia_relativa", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Relativa\\.R')
test.suiteReprovacaoDisciplina <- defineTestSuite("teste_reprovacao_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Reprovacao_Disciplina\\.R')
#
test.resultDisciplinaPorPeriodo <- runTestSuite(test.suiteDisciplinaPorPeriodo)
test.resultFrequenciaAbsoluta <- runTestSuite(test.suiteFrequenciaAbsoluta)
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
test.resultFrequenciaRelativa <- runTestSuite(test.suiteFrequenciaRelativa)
test.resultReprovacaoDisciplina <- runTestSuite(test.suiteReprovacaoDisciplina)
#
printTextProtocol(test.resultDisciplinaPorPeriodo)
printTextProtocol(test.resultFrequenciaAbsoluta)
printTextProtocol(test.resultInformacaoDeDisciplina)
printTextProtocol(test.resultFrequenciaRelativa)
printTextProtocol(test.resultReprovacaoDisciplina)
(round(1049/1151, digits = 7)
;
round(1049/1151, digits = 7)
round(1049/1152, digits = 7)
notas.disciplinas = read.csv("data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
#Calculo por periodo
#resultado.absoluto = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, sum)
#resultado.relativo = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
resultado = resultado[with(resultado, order(RESULTADORELATIVO)),]
write.csv(resultado, "data/reprovacoes_por_disciplina.csv", row.names=F, fileEncoding = "UTF-8")
notaDisciplDF = read.csv('data/historico-ccc-original.csv')
notaDisciplDF <- subset(notaDisciplDF, substring(as.character(notaDisciplDF$PERIODO), 5, 5) != "")
write.csv(notaDisciplDF, file = "data/historico-ccc.csv", row.names = FALSE, quote = FALSE)
#Chama a funcao de calcular o periodo da disciplina
source('src/R/funcao_Disciplina_Por_Periodo.R')
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PERIODORELATIVO"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PERIODORELATIVO = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,5), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
write.csv(notaDisciplDF, file = "data/arquivo_notas_disciplinas_periodo.csv", row.names = FALSE, quote = FALSE)
# Antes de executar este script, deve-se setar o Working Directory para "ccc-analytics-2.0 /" conforme seu repositório local
#setwd("ccc/ccc-analytics-2.0/")
notaDisciplDF = read.csv('data/arquivo_notas_disciplinas_periodo.csv')
install.packages("reshape")
require(plyr)
# Cria uma tabela com o codigo das disciplinas, o nome das disciplinas, o seu periodo relativo e a frenquencia absoluta de cada disciplina, todos em colunas
tabelaFrequencia <- ddply(notaDisciplDF, .(CODIGO, DISCIPLINA, PERIODORELATIVO), nrow)
#Ordena a tabela criada pelo periodo relativo, ainda em coluna
tabelaFrequencia <- tabelaFrequencia[with(tabelaFrequencia, order(PERIODORELATIVO)), ]
# Alterna os periodos relativos para linha, criando assim os 16 periodos do curso e ja colocando a sua frequencia absoluta no local que lhe cabe
tabelaFrequencia <- reshape(tabelaFrequencia, idvar = c("CODIGO", "DISCIPLINA"), timevar = "PERIODORELATIVO", direction = "wide")
tabelaFrequencia[,3:18][is.na(tabelaFrequencia[,3:18])] = 0
write.csv(tabelaFrequencia, file = "data/arquivo_frequencia_absoluta.csv", row.names = FALSE, quote = FALSE)
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
#setwd("ccc/ccc-analytics-2.0/")
#Definições de funções úteis neste
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
freqAbsluta = read.csv('data/arquivo_frequencia_absoluta.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
#colunas que contem as frequencias dos períodos
colunasUteis = 3:18
#Substitui NA por 0 (ZERO) para operações aritmeticas
freqAbsluta[,colunasUteis][is.na(freqAbsluta[,colunasUteis])] = 0
require(plyr)
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$CODIGO
#Vetor com a maior frequencia da disciplina observada em um período letivo
maiorFreq = apply(freqAbsluta[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(freqAbsluta[colunasUteis])
discMaisComumPeriodo = freqAbsluta[, c("CODIGO", "DISCIPLINA")]
discMaisComumPeriodo[, "PERMAISFREQ1ST"] = apply(freqAbsluta[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FREQRELATIVA1ST"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ2ND"] = apply(freqAbsluta[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FREQRELATIVA2ND"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ3RD"] = apply(freqAbsluta[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FREQRELATIVA3RD"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TOTALDEALUNOSPORDISCIPLINA"] = totalFreq
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$CODIGO,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TIPODEDISCIPLINA"))
write.csv(discMaisComumPeriodo, file = "data/maiores_frequencias_por_disciplina.csv", row.names = FALSE, quote = FALSE)
View(discMaisComumPeriodo)
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
#
test.suiteDisciplinaPorPeriodo <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Testes_Disciplina_Por_Periodo\\.R')
test.suiteFrequenciaAbsoluta <- defineTestSuite("teste_frequencia_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Absoluta\\.R')
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste_informacao_de_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina\\.R')
test.suiteFrequenciaRelativa <- defineTestSuite("teste_frequencia_relativa", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Relativa\\.R')
test.suiteReprovacaoDisciplina <- defineTestSuite("teste_reprovacao_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Reprovacao_Disciplina\\.R')
#
test.resultDisciplinaPorPeriodo <- runTestSuite(test.suiteDisciplinaPorPeriodo)
test.resultFrequenciaAbsoluta <- runTestSuite(test.suiteFrequenciaAbsoluta)
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
test.resultFrequenciaRelativa <- runTestSuite(test.suiteFrequenciaRelativa)
test.resultReprovacaoDisciplina <- runTestSuite(test.suiteReprovacaoDisciplina)
#
printTextProtocol(test.resultDisciplinaPorPeriodo)
printTextProtocol(test.resultFrequenciaAbsoluta)
printTextProtocol(test.resultInformacaoDeDisciplina)
printTextProtocol(test.resultFrequenciaRelativa)
printTextProtocol(test.resultReprovacaoDisciplina)
max(reprovacaoDisciplina$SITUACAO)
notasDisciplinas = read.csv("data/historico-ccc.csv",stringsAsFactors=F)
reprovacaoDisciplina = read.csv("data/reprovacoes_por_disciplina.csv")
max(reprovacaoDisciplina$SITUACAO)
View(reprovacaoDisciplina)
library('RUnit')
source('src/R/funcao_Disciplina_Por_Periodo.R')
#
test.suiteDisciplinaPorPeriodo <- defineTestSuite("teste_disciplina_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Testes_Disciplina_Por_Periodo\\.R')
test.suiteFrequenciaAbsoluta <- defineTestSuite("teste_frequencia_por_periodo", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Absoluta\\.R')
test.suiteInformacaoDeDisciplina <- defineTestSuite("teste_informacao_de_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Informacao_De_Disciplina\\.R')
test.suiteFrequenciaRelativa <- defineTestSuite("teste_frequencia_relativa", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Frequencia_Relativa\\.R')
test.suiteReprovacaoDisciplina <- defineTestSuite("teste_reprovacao_disciplina", dirs = file.path("src/R/testes"), testFileRegexp = 'Teste_Reprovacao_Disciplina\\.R')
#
test.resultDisciplinaPorPeriodo <- runTestSuite(test.suiteDisciplinaPorPeriodo)
test.resultFrequenciaAbsoluta <- runTestSuite(test.suiteFrequenciaAbsoluta)
test.resultInformacaoDeDisciplina <- runTestSuite(test.suiteInformacaoDeDisciplina)
test.resultFrequenciaRelativa <- runTestSuite(test.suiteFrequenciaRelativa)
test.resultReprovacaoDisciplina <- runTestSuite(test.suiteReprovacaoDisciplina)
#
printTextProtocol(test.resultDisciplinaPorPeriodo)
printTextProtocol(test.resultFrequenciaAbsoluta)
printTextProtocol(test.resultInformacaoDeDisciplina)
printTextProtocol(test.resultFrequenciaRelativa)
printTextProtocol(test.resultReprovacaoDisciplina)
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
#setwd("ccc/ccc-analytics-2.0/")
#Definições de funções úteis neste
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
freqAbsluta = read.csv('data/arquivo_frequencia_absoluta.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
#colunas que contem as frequencias dos períodos
colunasUteis = 3:18
#Substitui NA por 0 (ZERO) para operações aritmeticas
freqAbsluta[,colunasUteis][is.na(freqAbsluta[,colunasUteis])] = 0
require(plyr)
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$CODIGO
#Vetor com a maior frequencia da disciplina observada em um período letivo
maiorFreq = apply(freqAbsluta[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(freqAbsluta[colunasUteis])
discMaisComumPeriodo = freqAbsluta[, c("CODIGO", "DISCIPLINA")]
discMaisComumPeriodo[, "PERMAISFREQ1ST"] = apply(freqAbsluta[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FREQRELATIVA1ST"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ2ND"] = apply(freqAbsluta[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FREQRELATIVA2ND"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ3RD"] = apply(freqAbsluta[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FREQRELATIVA3RD"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TOTALDEALUNOSPORDISCIPLINA"] = totalFreq
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$CODIGO,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TIPODEDISCIPLINA"))
View(discMaisComumPeriodo)
notaDisciplDF = read.csv('data/historico-ccc-original.csv')
notaDisciplDF <- subset(notaDisciplDF, substring(as.character(notaDisciplDF$PERIODO), 5, 5) != "")
write.csv(notaDisciplDF, file = "data/historico-ccc.csv", row.names = FALSE, quote = FALSE)
notaDisciplDF = read.csv('data/historico-ccc.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
require(plyr)
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$CODIGO
infoDisciplinas <- ddply(notaDisciplDF, .(CODIGO, DISCIPLINA, DEPARTAMENTO), nrow)
infoDisciplinas[4] <- "OPT"
infoDisciplinas[is.element(infoDisciplinas$CODIGO,disciplinasObrigatorias),]$V1 = "OBG"
infoDisciplinas <- rename(infoDisciplinas, replace = c("V1" = "TIPODEDISCIPLINA"))
write.csv(infoDisciplinas, file = "data/arquivo_informacao_das_disciplinas.csv", row.names = FALSE)
notas.disciplinas = read.csv("data/historico-ccc.csv",stringsAsFactors=F)
info.disciplinas = read.csv("data/arquivo_informacao_das_disciplinas.csv",stringsAsFactors=F)
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Aprovado"] <- 0
notas.disciplinas$SITUACAO[notas.disciplinas$SITUACAO == "Reprovado" | notas.disciplinas$SITUACAO == "Reprovado por Falta"] <- 1
notas.disciplinas <- subset(notas.disciplinas, SITUACAO != "Trancado") #Removendo as disciplinas trancadas!
notas.disciplinas$SITUACAO = as.numeric(notas.disciplinas$SITUACAO)
resultado.absoluto = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, sum)
resultado.relativo = aggregate(SITUACAO ~ CODIGO, data = notas.disciplinas, mean)
#Calculo por periodo
#resultado.absoluto = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, sum)
#resultado.relativo = aggregate(SITUACAO ~ CODIGO + PERIODO, data = notas.disciplinas, mean)
resultado.absoluto = merge(info.disciplinas,resultado.absoluto, by=c("CODIGO"))
resultado.relativo = merge(info.disciplinas,resultado.relativo, by=c("CODIGO"))
resultado = cbind(resultado.absoluto, "RESULTADORELATIVO" = resultado.relativo$SITUACAO)
resultado = resultado[with(resultado, order(RESULTADORELATIVO)),]
write.csv(resultado, "data/reprovacoes_por_disciplina.csv", row.names=F, fileEncoding = "UTF-8")
#Chama a funcao de calcular o periodo da disciplina
source('src/R/funcao_Disciplina_Por_Periodo.R')
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
notaDisciplDF = read.csv('data/historico-ccc.csv')
notaDisciplDF[8] = NA
colnames(notaDisciplDF)[8] <- "PERIODORELATIVO"
# Adiciona ao data.frame uma coluna com o periodo relativo.
notaDisciplDF$PERIODORELATIVO = calcularPeriodoRelativo(substring(as.character(notaDisciplDF$PERIODO), 3,5), substring(as.character(notaDisciplDF$MATRICULA), 2,4))
write.csv(notaDisciplDF, file = "data/arquivo_notas_disciplinas_periodo.csv", row.names = FALSE, quote = FALSE)
#Deve-se setar o Working Directory, setwd(), para o diretório "ccc-analytics-2.0" antes de esecutar este script
#setwd("ccc/ccc-analytics-2.0/")
#Definições de funções úteis neste
maxn <- function(n) function(x) order(x, decreasing = TRUE)[n]
valorMaxn <- function(n) function(x) x[order(x, decreasing = TRUE)][n]
freqAbsluta = read.csv('data/arquivo_frequencia_absoluta.csv')
disciplinasPeriodoObrigatorias = read.csv('data/grade-disciplinas-por-periodo.csv')
#colunas que contem as frequencias dos períodos
colunasUteis = 3:18
#Substitui NA por 0 (ZERO) para operações aritmeticas
freqAbsluta[,colunasUteis][is.na(freqAbsluta[,colunasUteis])] = 0
require(plyr)
# Cria uma lista com o codigo das disciplinas obrigatorias
disciplinasObrigatorias <- disciplinasPeriodoObrigatorias$CODIGO
#Vetor com a maior frequencia da disciplina observada em um período letivo
maiorFreq = apply(freqAbsluta[colunasUteis], 1, max)
#Vetor com a soma de todas as frequencias de periodos letivos da disciplina
totalFreq = rowSums(freqAbsluta[colunasUteis])
discMaisComumPeriodo = freqAbsluta[, c("CODIGO", "DISCIPLINA")]
discMaisComumPeriodo[, "PERMAISFREQ1ST"] = apply(freqAbsluta[colunasUteis], 1, which.max)
discMaisComumPeriodo[, "FREQRELATIVA1ST"] = maiorFreq / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ2ND"] = apply(freqAbsluta[colunasUteis], 1, maxn(2))
discMaisComumPeriodo[, "FREQRELATIVA2ND"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(2))) / totalFreq
discMaisComumPeriodo[, "PERMAISFREQ3RD"] = apply(freqAbsluta[colunasUteis], 1, maxn(3))
discMaisComumPeriodo[, "FREQRELATIVA3RD"] = (apply(freqAbsluta[colunasUteis], 1, valorMaxn(3))) / totalFreq
discMaisComumPeriodo[, "TOTALDEALUNOSPORDISCIPLINA"] = totalFreq
# Colocar a informacao da disciplina se eh obrigatoria ou optativa
discMaisComumPeriodo[10] <- "OPT"
discMaisComumPeriodo[is.element(discMaisComumPeriodo$CODIGO,disciplinasObrigatorias),]$V10 = "OBG"
discMaisComumPeriodo <- rename(discMaisComumPeriodo, replace = c("V10" = "TIPODEDISCIPLINA"))
write.csv(discMaisComumPeriodo, file = "data/maiores_frequencias_por_disciplina.csv", row.names = FALSE, quote = FALSE)
# Antes de executar este script, deve-se setar o Working Directory para "ccc-analytics-2.0 /" conforme seu repositório local
#setwd("ccc/ccc-analytics-2.0/")
notaDisciplDF = read.csv('data/arquivo_notas_disciplinas_periodo.csv')
install.packages("reshape")
require(plyr)
# Cria uma tabela com o codigo das disciplinas, o nome das disciplinas, o seu periodo relativo e a frenquencia absoluta de cada disciplina, todos em colunas
tabelaFrequencia <- ddply(notaDisciplDF, .(CODIGO, DISCIPLINA, PERIODORELATIVO), nrow)
#Ordena a tabela criada pelo periodo relativo, ainda em coluna
tabelaFrequencia <- tabelaFrequencia[with(tabelaFrequencia, order(PERIODORELATIVO)), ]
# Alterna os periodos relativos para linha, criando assim os 16 periodos do curso e ja colocando a sua frequencia absoluta no local que lhe cabe
tabelaFrequencia <- reshape(tabelaFrequencia, idvar = c("CODIGO", "DISCIPLINA"), timevar = "PERIODORELATIVO", direction = "wide")
tabelaFrequencia[,3:18][is.na(tabelaFrequencia[,3:18])] = 0
write.csv(tabelaFrequencia, file = "data/arquivo_frequencia_absoluta.csv", row.names = FALSE, quote = FALSE)
